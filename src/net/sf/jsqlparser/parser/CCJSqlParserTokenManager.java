/* CCJSqlParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. CCJSqlParserTokenManager.java */
/*
 * #%L
 * JSQLParser library
 * %%
 * Copyright (C) 2004 - 2014 JSQLParser
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */

package net.sf.jsqlparser.parser;
import net.sf.jsqlparser.expression.*;
import net.sf.jsqlparser.expression.operators.arithmetic.*;
import net.sf.jsqlparser.expression.operators.conditional.*;
import net.sf.jsqlparser.expression.operators.relational.*;
import net.sf.jsqlparser.schema.*;
import net.sf.jsqlparser.statement.*;
import net.sf.jsqlparser.statement.alter.*;
import net.sf.jsqlparser.statement.create.index.*;
import net.sf.jsqlparser.statement.create.table.*;
import net.sf.jsqlparser.statement.create.view.*;
import net.sf.jsqlparser.statement.delete.*;
import net.sf.jsqlparser.statement.drop.*;
import net.sf.jsqlparser.statement.insert.*;
import net.sf.jsqlparser.statement.replace.*;
import net.sf.jsqlparser.statement.execute.*;
import net.sf.jsqlparser.statement.select.*;
import net.sf.jsqlparser.statement.truncate.*;
import net.sf.jsqlparser.statement.update.*;
import net.sf.jsqlparser.statement.upsert.*;
import net.sf.jsqlparser.statement.merge.*;
import java.util.*;

/** Token Manager. */
public class CCJSqlParserTokenManager implements CCJSqlParserConstants {
    public void CommonTokenAction(Token t)
        {
                t.absoluteBegin = getCurrentTokenAbsolutePosition();
                t.absoluteEnd = t.absoluteBegin + t.image.length();
        }

        public int getCurrentTokenAbsolutePosition()
        {
                if (input_stream instanceof SimpleCharStream)
                        return ((SimpleCharStream)input_stream).getAbsoluteTokenBegin();
                return -1;
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      case 0:
         if ((active3 & 0x6000c00L) != 0L)
            return 22;
         if ((active3 & 0x40000000L) != 0L)
            return 50;
         if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 176;
            return 15;
         }
         if ((active2 & 0x6f8L) != 0L)
         {
            jjmatchedKind = 176;
            return 144;
         }
         if ((active2 & 0x8000000000000000L) != 0L || (active3 & 0x8000L) != 0L)
            return 163;
         if ((active3 & 0x4081L) != 0L)
            return 164;
         if ((active3 & 0x30L) != 0L)
            return 165;
         if ((active0 & 0x7fe0000000L) != 0L)
         {
            jjmatchedKind = 176;
            return 96;
         }
         if ((active3 & 0x10000L) != 0L)
            return 25;
         if ((active3 & 0x1000L) != 0L)
            return 166;
         if ((active0 & 0xfffe000000007ffcL) != 0L || (active1 & 0xffffffff00ffffffL) != 0L || (active2 & 0x2ffe40007L) != 0L || (active3 & 0x18000000L) != 0L)
         {
            jjmatchedKind = 176;
            return 33;
         }
         if ((active0 & 0x1ff8000000000L) != 0L || (active1 & 0xff000000L) != 0L || (active2 & 0x1bf800L) != 0L)
         {
            jjmatchedKind = 176;
            return 167;
         }
         if ((active2 & 0x800000000000000L) != 0L)
            return 11;
         if ((active0 & 0xfff8000L) != 0L)
         {
            jjmatchedKind = 176;
            return 71;
         }
         return -1;
      case 1:
         if ((active0 & 0x4000001800004300L) != 0L || (active1 & 0x6f3c0003feL) != 0L)
            return 33;
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 176;
               jjmatchedPos = 1;
            }
            return 70;
         }
         if ((active0 & 0xbfffffe7e7ffbcfcL) != 0L || (active1 & 0xffffff90c3fffc01L) != 0L || (active2 & 0x3fffffeffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 176;
               jjmatchedPos = 1;
            }
            return 33;
         }
         return -1;
      case 2:
         if ((active0 & 0xbf8ffdf7e7ff9c24L) != 0L || (active1 & 0xb9ffffdaebffeefdL) != 0L || (active2 & 0x2fffdfcffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 176;
               jjmatchedPos = 2;
            }
            return 33;
         }
         if ((active0 & 0x700200000022d8L) != 0L || (active1 & 0x4600000010001000L) != 0L || (active2 & 0x100020200L) != 0L)
            return 33;
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 176;
               jjmatchedPos = 2;
            }
            return 69;
         }
         return -1;
      case 3:
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 176;
               jjmatchedPos = 3;
            }
            return 68;
         }
         if ((active0 & 0x38060a100068000L) != 0L || (active1 & 0x14000118c201ac80L) != 0L || (active2 & 0x2ee0000e3L) != 0L)
            return 33;
         if ((active0 & 0xbc6f9d56e7f91c24L) != 0L || (active1 & 0xa9fffec229fe427dL) != 0L || (active2 & 0x11fdfc1cL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 176;
               jjmatchedPos = 3;
            }
            return 33;
         }
         return -1;
      case 4:
         if ((active0 & 0xc26000004100420L) != 0L || (active1 & 0x11188c08062000dL) != 0L || (active2 & 0x10c8101cL) != 0L)
            return 33;
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 176;
               jjmatchedPos = 4;
            }
            return 67;
         }
         if ((active0 & 0xb249dd56e3e91804L) != 0L || (active1 & 0xa8ee7602299c4270L) != 0L || (active2 & 0xc135ec80L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 176;
               jjmatchedPos = 4;
            }
            return 33;
         }
         return -1;
      case 5:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 5;
            return 66;
         }
         if ((active0 & 0x2a49504661890800L) != 0L || (active1 & 0xa0e67600291c4060L) != 0L || (active2 & 0x81344c90L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 5;
            return 33;
         }
         if ((active0 & 0x90008d1082601004L) != 0L || (active1 & 0x808000200800210L) != 0L || (active2 & 0x4081a000L) != 0L)
            return 33;
         return -1;
      case 6:
         if ((active0 & 0x8000000L) != 0L)
            return 65;
         if ((active0 & 0x2a08004421080000L) != 0L || (active1 & 0xa0c6320020140060L) != 0L || (active2 & 0x344c90L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 6;
            return 33;
         }
         if ((active0 & 0x41500240810800L) != 0L || (active1 & 0x20440009084000L) != 0L || (active2 & 0x81000000L) != 0L)
            return 33;
         return -1;
      case 7:
         if ((active0 & 0x200000400000000L) != 0L || (active1 & 0x8040000000000040L) != 0L || (active2 & 0x304400L) != 0L)
            return 33;
         if ((active0 & 0x2808004021080000L) != 0L || (active1 & 0x2086320020140020L) != 0L || (active2 & 0x40890L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 7;
            return 33;
         }
         return -1;
      case 8:
         if ((active0 & 0x2800000021000000L) != 0L || (active1 & 0x4000020140000L) != 0L || (active2 & 0x40010L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 8;
            return 33;
         }
         if ((active0 & 0x8004000080000L) != 0L || (active1 & 0x2082320000000020L) != 0L || (active2 & 0x880L) != 0L)
            return 33;
         return -1;
      case 9:
         if ((active0 & 0x2800000000000000L) != 0L || (active1 & 0x140000L) != 0L || (active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 9;
            return 33;
         }
         if ((active0 & 0x21000000L) != 0L || (active1 & 0x4000020000000L) != 0L || (active2 & 0x10L) != 0L)
            return 33;
         return -1;
      case 10:
         if ((active0 & 0x2800000000000000L) != 0L || (active1 & 0x140000L) != 0L || (active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 10;
            return 33;
         }
         return -1;
      case 11:
         if ((active0 & 0x2000000000000000L) != 0L || (active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 11;
            return 33;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x140000L) != 0L)
            return 33;
         return -1;
      case 12:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 12;
            return 33;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
            return 33;
         return -1;
      case 13:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 13;
            return 33;
         }
         return -1;
      case 14:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 14;
            return 33;
         }
         return -1;
      case 15:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 15;
            return 33;
         }
         return -1;
      case 16:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 16;
            return 33;
         }
         return -1;
      case 17:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 17;
            return 33;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x30L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x18000000L);
      case 37:
         return jjStopAtPos(0, 209);
      case 38:
         return jjStopAtPos(0, 205);
      case 40:
         return jjStopAtPos(0, 184);
      case 41:
         return jjStopAtPos(0, 185);
      case 42:
         return jjStopAtPos(0, 186);
      case 43:
         return jjStopAtPos(0, 190);
      case 44:
         return jjStopAtPos(0, 183);
      case 45:
         jjmatchedKind = 202;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x6000800L);
      case 46:
         return jjStartNfaWithStates_0(0, 187, 11);
      case 47:
         return jjStartNfaWithStates_0(0, 208, 25);
      case 58:
         jjmatchedKind = 189;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x800000L);
      case 59:
         return jjStopAtPos(0, 162);
      case 60:
         jjmatchedKind = 192;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x4080L);
      case 61:
         return jjStopAtPos(0, 182);
      case 62:
         jjmatchedKind = 191;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x8000L);
      case 63:
         jjmatchedKind = 188;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x300L);
      case 64:
         jjmatchedKind = 216;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x42L);
      case 91:
         return jjStartNfaWithStates_0(0, 222, 50);
      case 93:
         return jjStopAtPos(0, 223);
      case 94:
         return jjStopAtPos(0, 210);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3fcL, 0x0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x7c00L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfff8000L, 0x0L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7fe0000000L, 0x0L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1ff8000000000L, 0x0L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3fe000000000000L, 0x0L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0xc00000000000000L, 0x0L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x3000000000000000L, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x3ffL, 0x0L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7e000L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf80000L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xff000000L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1ff00000000L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfe0000000000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7ff000000000000L, 0x0L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf800000000000000L, 0x40007L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x6f8L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1bf800L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3e00000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfc000000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000L, 0x0L);
      case 123:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x20680000L);
      case 124:
         return jjStartNfaWithStates_0(0, 204, 166);
      case 125:
         return jjStopAtPos(0, 212);
      case 126:
         jjmatchedKind = 194;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x8L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active3 & 0x800L) != 0L)
            return jjStopAtPos(1, 203);
         break;
      case 38:
         if ((active3 & 0x200L) != 0L)
            return jjStopAtPos(1, 201);
         break;
      case 42:
         if ((active3 & 0x8L) != 0L)
            return jjStopAtPos(1, 195);
         break;
      case 58:
         if ((active3 & 0x800000L) != 0L)
            return jjStopAtPos(1, 215);
         break;
      case 60:
         if ((active3 & 0x4000L) != 0L)
            return jjStopAtPos(1, 206);
         break;
      case 62:
         if ((active3 & 0x40L) != 0L)
            return jjStopAtPos(1, 198);
         else if ((active3 & 0x8000L) != 0L)
            return jjStopAtPos(1, 207);
         else if ((active3 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 219;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x14000000L);
      case 64:
         if ((active3 & 0x2L) != 0L)
            return jjStopAtPos(1, 193);
         else if ((active3 & 0x80L) != 0L)
            return jjStopAtPos(1, 199);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000078000L, active1, 0x1020001186000L, active2, 0x5e00018L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active3 & 0x80000L) != 0L)
            return jjStopAtPos(1, 211);
         return jjMoveStringLiteralDfa2_0(active0, 0x8L, active1, 0L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20001e0000c00L, active1, 0x78ee040002209800L, active2, 0xc0L, active3, 0L);
      case 70:
      case 102:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 62, 33);
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0x20000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000L, active1, 0L, active2, 0x18000020L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2004000600003000L, active1, 0x8100080000430000L, active2, 0xe2000000L, active3, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1L, active3, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000030L, active1, 0x10000000000001L, active2, 0L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L);
      case 78:
      case 110:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000c0L, active1, 0x8000000fcL, active2, 0x107800L, active3, 0L);
      case 79:
      case 111:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x78001001e00000L, active1, 0x600000038840400L, active2, 0x200000202L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L, active2, 0x18000L, active3, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0L);
      case 82:
      case 114:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc80002006000000L, active1, 0xf04000000000L, active2, 0x400L, active3, 0L);
      case 83:
      case 115:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000200L, active1, 0x200L, active2, 0xa0000L, active3, 0L);
      case 84:
      case 116:
         if ((active3 & 0x200000L) != 0L)
         {
            jjmatchedKind = 213;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0x400000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x300004008000000L, active1, 0x80c0000000L, active2, 0L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1f80000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 33);
         break;
      case 124:
         if ((active3 & 0x100L) != 0L)
            return jjStopAtPos(1, 200);
         break;
      case 126:
         if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 42:
         if ((active3 & 0x20L) != 0L)
            return jjStopAtPos(2, 197);
         break;
      case 62:
         if ((active3 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 218);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 220);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000080000L, active1, 0L, active2, 0x4L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x818L, active3, 0L);
      case 67:
      case 99:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0x1c0000000000L, active1, 0x2000008000000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 3, 33);
         else if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 33);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000800004L, active2, 0x8000L, active3, 0L);
      case 69:
      case 101:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 145, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0x600002100000L, active1, 0x311000000800L, active2, 0x1a000020L, active3, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0x4000200008000L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000400L, active1, 0x108000000000000L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0x10c00000000401L, active2, 0x4083001L, active3, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 4, 33);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 160, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0x3080000c0208000L, active1, 0x8000008c0000000L, active2, 0xe44000L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x1000000000020000L, active2, 0xc2L, active3, 0L);
      case 78:
      case 110:
         if ((active3 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 221);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000001801000L, active1, 0x1000000400208L, active2, 0x200000000L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0xc80002004000000L, active1, 0L, active2, 0L, active3, 0L);
      case 80:
      case 112:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 137, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x2020000000000000L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x64000008000000L, active1, 0x60000200000L, active2, 0x1000000L, active3, 0L);
      case 83:
      case 115:
         if ((active3 & 0x400000L) != 0L)
            return jjStopAtPos(2, 214);
         return jjMoveStringLiteralDfa3_0(active0, 0x8700070000L, active1, 0x40000000002010L, active2, 0x110000L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 33);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 92, 33);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 126, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000824L, active1, 0x800080011840e0L, active2, 0xe0000000L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L, active2, 0x400L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x80020000000L, active2, 0L, active3, 0L);
      case 87:
      case 119:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000040000L, active2, 0L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 33);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L, active2, 0x40000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40242001000L, active1, 0x2000000020000000L, active2, 0x8000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x11000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 33);
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x22400000110000L, active1, 0x340000080000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 33);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 33);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 33);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 129, 33);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 161, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x400800a0000020L, active1, 0x80c00c00010407cL, active2, 0x10000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000200000L, active2, 0L);
      case 72:
      case 104:
         if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x100000000000000L, active2, 0xc0000000L);
      case 73:
      case 105:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 124, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000404L, active1, 0x820000L, active2, 0x300000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000001L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 33);
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x208104000000000L, active1, 0x8020000080000000L, active2, 0x18L);
      case 77:
      case 109:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0x400000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 33);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 100, 33);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 133, 33);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 155, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L, active2, 0x80400L);
      case 79:
      case 111:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x880000000000L, active2, 0x5800L);
      case 80:
      case 112:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 33);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 33);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 128, 33);
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 82:
      case 114:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 104, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000008080000L, active1, 0L, active2, 0x10000004L);
      case 83:
      case 115:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 122, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x4800005000000L, active1, 0x200000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 33);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 33);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 33);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 33);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 154, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x40020000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000000200000L, active1, 0x82000001400200L, active2, 0xc00000L);
      case 87:
      case 119:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 153, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L, active2, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000090000L, active1, 0x20400000000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000008000000L, active2, 0x40400L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x200000L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 33);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 33);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 33);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 33);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 116, 33);
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 156, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0x8800800L, active1, 0x140200000000L, active2, 0x800010L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 71:
      case 103:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 147, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x104000L);
      case 72:
      case 104:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40004400400000L, active1, 0x8000220000000000L, active2, 0x41000000L);
      case 75:
      case 107:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 33);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x11000000000L, active1, 0x20000200L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 33);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 140, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000004L, active1, 0L, active2, 0x80000080L);
      case 80:
      case 112:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8000c0000000000L, active1, 0x40000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 5, 33);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 33);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 33);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 33);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 111, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000020001000L, active1, 0x20c6000001104070L, active2, 0x10000L);
      case 83:
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 33);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 86, 33);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 33);
         break;
      case 84:
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 33);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 33);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 107, 33);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 120, 33);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 130, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0x200800083000000L, active1, 0L, active2, 0x8000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x500000000000L, active1, 0L, active2, 0x2800L);
      case 88:
      case 120:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000001004000L, active2, 0x240400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x1004000880000L, active1, 0x20000000000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000010000L, active1, 0x100000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 33);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 33);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 33);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 33);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 33);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 33);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 141, 33);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 143, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000040000800L, active1, 0x4000000080000L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L, active2, 0x4000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000020100000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0x8000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 2, 33);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 33);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 158, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x408000000L, active1, 0x8080040000000000L, active2, 0x1100800L);
      case 80:
      case 112:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 115, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x21000000L, active1, 0x400000040000L, active2, 0x80L);
      case 83:
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 33);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 151, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2200000000020L, active2, 0x10L);
      case 84:
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 33);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 33);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 33);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 33);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 123, 33);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 144, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x20000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x80000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 33);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4021000000L, active1, 0x100040L, active2, 0x80L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000400000000L, active1, 0x40000000000000L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 33);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 83, 33);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000L, active2, 0x800L);
      case 69:
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 33);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 33);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 33);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 33);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 33);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 117, 33);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L, active2, 0x104000L);
      case 71:
      case 103:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 152, 33);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0x82320000040000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 33);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 88, 33);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 78:
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 33);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 33);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 33);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 65);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 33);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 106, 33);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 159, 33);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L, active1, 0x2000000000000000L, active2, 0x200400L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 110, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000L, active2, 0x10L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000020L, active2, 0x40000L);
      case 68:
      case 100:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 142, 33);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 148, 33);
         break;
      case 69:
      case 101:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 138, 33);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 149, 33);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L, active1, 0L, active2, 0x800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000001000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 33);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0x80100000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0x2000220000040000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 83:
      case 115:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 127, 33);
         break;
      case 84:
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 33);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 33);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 118, 33);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 68:
      case 100:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 139, 33);
         break;
      case 69:
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 33);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 113, 33);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 51, 33);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 108, 33);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 119, 33);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 105, 33);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 109, 33);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000001000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 19, 33);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 125, 33);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 69, 33);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 89:
      case 121:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 135, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 29, 33);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 93, 33);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 132, 33);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 114, 33);
         break;
      case 84:
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 24, 33);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(11, 84, 33);
         break;
      case 84:
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 59, 33);
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 89:
      case 121:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(11, 82, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, active2, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x40000L);
      case 89:
      case 121:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 61, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old2, long active2){
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, 0L, active2, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_0(active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, 0L, active2, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_0(active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(13, 0L, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, 0L, active2, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_0(active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(14, 0L, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, 0L, active2, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(15, 0L, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, active2, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 87:
      case 119:
         return jjMoveStringLiteralDfa18_0(active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, active2, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(18, 146, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, active2, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec10 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec27 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec29 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec30 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec31 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec35 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec36 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec37 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec38 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec39 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec40 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec41 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec43 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec44 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec45 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec46 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec47 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec48 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec49 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec50 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec51 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec52 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec53 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec54 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec55 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec56 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec57 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec58 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec59 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec60 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec61 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec62 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 163;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 164:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(128, 129); }
                  else if (curChar == 62)
                  {
                     if (kind > 165)
                        kind = 165;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 164)
                        kind = 164;
                  }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(126, 127); }
                  break;
               case 163:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(2, 3); }
                  else if (curChar == 61)
                  {
                     if (kind > 163)
                        kind = 163;
                  }
                  break;
               case 165:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(5, 6); }
                  else if (curChar == 61)
                  {
                     if (kind > 166)
                        kind = 166;
                  }
                  break;
               case 166:
               case 8:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(8, 9); }
                  break;
               case 167:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(33); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 5); }
                  break;
               case 70:
               case 33:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 96:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 65:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 68:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 71:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 66:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 67:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 144:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 15:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(33); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAdd(16); }
                  break;
               case 69:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 170)
                        kind = 170;
                     { jjCheckNAddStates(6, 12); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x1800000000L & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(33); }
                  }
                  else if (curChar == 60)
                     { jjCheckNAddStates(13, 16); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 5); }
                  else if (curChar == 34)
                     { jjCheckNAdd(44); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 46)
                     { jjCheckNAdd(11); }
                  else if (curChar == 33)
                     { jjCheckNAddTwoStates(5, 6); }
                  else if (curChar == 62)
                     { jjCheckNAddTwoStates(2, 3); }
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 1:
                  if (curChar == 62)
                     { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 2:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 3:
                  if (curChar == 61 && kind > 163)
                     kind = 163;
                  break;
               case 4:
                  if (curChar == 33)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 5:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 6:
                  if (curChar == 61 && kind > 166)
                     kind = 166;
                  break;
               case 10:
                  if (curChar == 46)
                     { jjCheckNAdd(11); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(14); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  { jjCheckNAdd(14); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 17:
                  if (curChar == 39 && kind > 172)
                     kind = 172;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if (curChar != 45)
                     break;
                  if (kind > 174)
                     kind = 174;
                  { jjCheckNAdd(23); }
                  break;
               case 23:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  { jjCheckNAdd(23); }
                  break;
               case 24:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 26:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 27:
                  if (curChar == 42)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 28:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(29, 27); }
                  break;
               case 29:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(29, 27); }
                  break;
               case 30:
                  if (curChar == 47 && kind > 175)
                     kind = 175;
                  break;
               case 31:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 32:
                  if ((0x1800000000L & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 35:
                  if (curChar == 39)
                     { jjCheckNAddStates(0, 5); }
                  break;
               case 37:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 38:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 39:
                  if (curChar == 39 && kind > 179)
                     kind = 179;
                  break;
               case 40:
                  if (curChar == 39)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 41:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 43:
                  if (curChar == 34)
                     { jjCheckNAdd(44); }
                  break;
               case 44:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(44, 45); }
                  break;
               case 45:
                  if (curChar == 34 && kind > 180)
                     kind = 180;
                  break;
               case 47:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjAddStates(26, 27); }
                  break;
               case 50:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(51, 52); }
                  break;
               case 51:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(51, 52); }
                  break;
               case 55:
                  if (curChar == 41 && kind > 136)
                     kind = 136;
                  break;
               case 56:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 98:
                  if (curChar == 40)
                     { jjCheckNAdd(99); }
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(99, 100); }
                  break;
               case 100:
                  if (curChar == 41)
                     { jjCheckNAddTwoStates(101, 102); }
                  break;
               case 101:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(101, 102); }
                  break;
               case 104:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(28, 29); }
                  break;
               case 106:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(30, 31); }
                  break;
               case 122:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(32, 35); }
                  break;
               case 125:
                  if (curChar == 60)
                     { jjCheckNAddStates(13, 16); }
                  break;
               case 126:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(126, 127); }
                  break;
               case 127:
                  if (curChar == 61 && kind > 164)
                     kind = 164;
                  break;
               case 128:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(128, 129); }
                  break;
               case 129:
                  if (curChar == 62 && kind > 165)
                     kind = 165;
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  { jjCheckNAddStates(6, 12); }
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(131, 10); }
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(132, 133); }
                  break;
               case 133:
                  if (curChar != 46)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 135:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(136); }
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  { jjCheckNAdd(136); }
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(137, 138); }
                  break;
               case 139:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(140); }
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  { jjCheckNAdd(140); }
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  { jjCheckNAdd(141); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 166:
               case 9:
                  if (curChar == 124 && kind > 167)
                     kind = 167;
                  break;
               case 167:
               case 33:
                  if ((0x87fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 70:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(33); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 96:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(33); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 65:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(33); }
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 75;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 68:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(33); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 71:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(33); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 66:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(33); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(33); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 144:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(33); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 15:
                  if ((0x87fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 69:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(33); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(33); }
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 96)
                     { jjCheckNAdd(47); }
                  else if (curChar == 124)
                     { jjAddStates(36, 37); }
                  if ((0x20402000204020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(38, 41); }
                  else if ((0x1000000010L & l) != 0L)
                     { jjAddStates(42, 43); }
                  else if ((0x800000008L & l) != 0L)
                     { jjAddStates(44, 46); }
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 7:
                  if (curChar == 124)
                     { jjAddStates(36, 37); }
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(47, 48); }
                  break;
               case 16:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(49, 50); }
                  break;
               case 18:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(20); }
                  break;
               case 20:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  { jjCheckNAdd(20); }
                  break;
               case 23:
                  if (kind > 174)
                     kind = 174;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 28:
               case 29:
                  { jjCheckNAddTwoStates(29, 27); }
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 34:
                  if ((0x20402000204020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 38:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 42:
                  { jjCheckNAddStates(23, 25); }
                  break;
               case 44:
                  { jjAddStates(51, 52); }
                  break;
               case 46:
                  if (curChar == 96)
                     { jjCheckNAdd(47); }
                  break;
               case 47:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 48:
                  if (curChar == 96 && kind > 180)
                     kind = 180;
                  break;
               case 49:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
               case 51:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(51, 52); }
                  break;
               case 52:
                  if (curChar == 93 && kind > 180)
                     kind = 180;
                  break;
               case 53:
                  if ((0x800000008L & l) != 0L)
                     { jjAddStates(44, 46); }
                  break;
               case 54:
                  if ((0x1000000010000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  { jjCheckNAdd(56); }
                  break;
               case 57:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 58:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 72:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  { jjCheckNAdd(56); }
                  break;
               case 73:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(72); }
                  break;
               case 74:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(72); }
                  break;
               case 84:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(42, 43); }
                  break;
               case 94:
                  if ((0x2000000020L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 95:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(94); }
                  break;
               case 97:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(53, 55); }
                  break;
               case 102:
                  if ((0x80000000800000L & l) != 0L)
                     { jjAddStates(56, 57); }
                  break;
               case 103:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(104); }
                  break;
               case 105:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 107:
                  if ((0x2000000020L & l) != 0L && kind > 168)
                     kind = 168;
                  break;
               case 108:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if ((0x400000004000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 112:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 115:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(104); }
                  break;
               case 117:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 123:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(97); }
                  break;
               case 124:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 134:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(58, 59); }
                  break;
               case 138:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(60, 61); }
                  break;
               case 142:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(38, 41); }
                  break;
               case 143:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(94); }
                  break;
               case 145:
                  if ((0x1000000010000L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 146:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(97); }
                  break;
               case 154:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAddStates(53, 55); }
                  break;
               case 156:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 167:
               case 33:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 70:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 96:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 65:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 68:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 71:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 66:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 67:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 144:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 15:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 69:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(33); }
                  break;
               case 23:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 28:
               case 29:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(29, 27); }
                  break;
               case 38:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 42:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 44:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(51, 52); }
                  break;
               case 47:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(26, 27); }
                  break;
               case 50:
               case 51:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(51, 52); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 163 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\73", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\75", "\54", "\50", "\51", "\52", "\56", "\77", "\72", "\53", "\76", "\74", 
"\100\100", "\176", "\176\52", "\41\176", "\41\176\52", "\100\76", "\74\100", "\77\174", 
"\77\46", "\55", "\55\43", "\174", "\46", "\74\74", "\76\76", "\57", "\45", "\136", null, 
"\175", null, null, "\72\72", "\100", "\55\76", "\55\76\76", "\43\76", "\43\76\76", 
null, "\133", "\135", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   36, 38, 39, 41, 42, 39, 131, 10, 132, 133, 137, 138, 141, 126, 127, 128, 
   129, 27, 28, 30, 36, 38, 39, 41, 42, 39, 47, 48, 104, 113, 106, 110, 
   98, 101, 102, 122, 8, 9, 144, 152, 154, 162, 96, 124, 71, 82, 92, 13, 
   14, 16, 17, 44, 45, 98, 102, 122, 115, 121, 135, 136, 139, 140, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec40[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec62[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         CommonTokenAction(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CCJSqlParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new RuntimeException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CCJSqlParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 163; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffffdL, 0xffffffffffffffffL, 0xffd917ffffffffffL, 0xffffffffL, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 0xc00000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0xc00000000000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[163];
    private final int[] jjstateSet = new int[2 * 163];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
