/* Generated By:JJTree&JavaCC: Do not edit this line. CCJSqlParserConstants.java */
/*
 * #%L
 * JSQLParser library
 * %%
 * Copyright (C) 2004 - 2014 JSQLParser
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */

package net.sf.jsqlparser.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CCJSqlParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int K_ACTION = 2;
  /** RegularExpression Id. */
  int K_ADD = 3;
  /** RegularExpression Id. */
  int K_ALL = 4;
  /** RegularExpression Id. */
  int K_ALTER = 5;
  /** RegularExpression Id. */
  int K_AND = 6;
  /** RegularExpression Id. */
  int K_ANY = 7;
  /** RegularExpression Id. */
  int K_AS = 8;
  /** RegularExpression Id. */
  int K_ASC = 9;
  /** RegularExpression Id. */
  int K_BEGIN = 10;
  /** RegularExpression Id. */
  int K_BETWEEN = 11;
  /** RegularExpression Id. */
  int K_BINARY = 12;
  /** RegularExpression Id. */
  int K_BIT = 13;
  /** RegularExpression Id. */
  int K_BY = 14;
  /** RegularExpression Id. */
  int K_CALL = 15;
  /** RegularExpression Id. */
  int K_CASCADE = 16;
  /** RegularExpression Id. */
  int K_CASE = 17;
  /** RegularExpression Id. */
  int K_CAST = 18;
  /** RegularExpression Id. */
  int K_CHARACTER = 19;
  /** RegularExpression Id. */
  int K_CHECK = 20;
  /** RegularExpression Id. */
  int K_COLUMN = 21;
  /** RegularExpression Id. */
  int K_COMMIT = 22;
  /** RegularExpression Id. */
  int K_CONNECT = 23;
  /** RegularExpression Id. */
  int K_CONSTRAINT = 24;
  /** RegularExpression Id. */
  int K_CREATE = 25;
  /** RegularExpression Id. */
  int K_CROSS = 26;
  /** RegularExpression Id. */
  int K_CURRENT = 27;
  /** RegularExpression Id. */
  int K_DATETIMELITERAL = 28;
  /** RegularExpression Id. */
  int K_DEFERRABLE = 29;
  /** RegularExpression Id. */
  int K_DELAYED = 30;
  /** RegularExpression Id. */
  int K_DELETE = 31;
  /** RegularExpression Id. */
  int K_DESC = 32;
  /** RegularExpression Id. */
  int K_DISABLE = 33;
  /** RegularExpression Id. */
  int K_DISTINCT = 34;
  /** RegularExpression Id. */
  int K_DO = 35;
  /** RegularExpression Id. */
  int K_DOUBLE = 36;
  /** RegularExpression Id. */
  int K_DROP = 37;
  /** RegularExpression Id. */
  int K_DUPLICATE = 38;
  /** RegularExpression Id. */
  int K_ELSE = 39;
  /** RegularExpression Id. */
  int K_ENABLE = 40;
  /** RegularExpression Id. */
  int K_END = 41;
  /** RegularExpression Id. */
  int K_ESCAPE = 42;
  /** RegularExpression Id. */
  int K_EXCEPT = 43;
  /** RegularExpression Id. */
  int K_EXCLUDE = 44;
  /** RegularExpression Id. */
  int K_EXEC = 45;
  /** RegularExpression Id. */
  int K_EXECUTE = 46;
  /** RegularExpression Id. */
  int K_EXISTS = 47;
  /** RegularExpression Id. */
  int K_EXTRACT = 48;
  /** RegularExpression Id. */
  int K_FETCH = 49;
  /** RegularExpression Id. */
  int K_FIRST = 50;
  /** RegularExpression Id. */
  int K_FOLLOWING = 51;
  /** RegularExpression Id. */
  int K_FOR = 52;
  /** RegularExpression Id. */
  int K_FORCE = 53;
  /** RegularExpression Id. */
  int K_FOREIGN = 54;
  /** RegularExpression Id. */
  int K_FROM = 55;
  /** RegularExpression Id. */
  int K_FULL = 56;
  /** RegularExpression Id. */
  int K_FULLTEXT = 57;
  /** RegularExpression Id. */
  int K_GROUP = 58;
  /** RegularExpression Id. */
  int K_GROUP_CONCAT = 59;
  /** RegularExpression Id. */
  int K_HAVING = 60;
  /** RegularExpression Id. */
  int K_HIGH_PRIORITY = 61;
  /** RegularExpression Id. */
  int K_IF = 62;
  /** RegularExpression Id. */
  int K_IGNORE = 63;
  /** RegularExpression Id. */
  int K_ILIKE = 64;
  /** RegularExpression Id. */
  int K_IN = 65;
  /** RegularExpression Id. */
  int K_INDEX = 66;
  /** RegularExpression Id. */
  int K_INNER = 67;
  /** RegularExpression Id. */
  int K_INSERT = 68;
  /** RegularExpression Id. */
  int K_INTERSECT = 69;
  /** RegularExpression Id. */
  int K_INTERVAL = 70;
  /** RegularExpression Id. */
  int K_INTO = 71;
  /** RegularExpression Id. */
  int K_IS = 72;
  /** RegularExpression Id. */
  int K_ISNULL = 73;
  /** RegularExpression Id. */
  int K_JOIN = 74;
  /** RegularExpression Id. */
  int K_KEEP = 75;
  /** RegularExpression Id. */
  int K_KEY = 76;
  /** RegularExpression Id. */
  int K_LAST = 77;
  /** RegularExpression Id. */
  int K_LATERAL = 78;
  /** RegularExpression Id. */
  int K_LEFT = 79;
  /** RegularExpression Id. */
  int K_LIKE = 80;
  /** RegularExpression Id. */
  int K_LIMIT = 81;
  /** RegularExpression Id. */
  int K_LOW_PRIORITY = 82;
  /** RegularExpression Id. */
  int K_MATCHED = 83;
  /** RegularExpression Id. */
  int K_MATERIALIZED = 84;
  /** RegularExpression Id. */
  int K_MERGE = 85;
  /** RegularExpression Id. */
  int K_MINUS = 86;
  /** RegularExpression Id. */
  int K_MODIFY = 87;
  /** RegularExpression Id. */
  int K_NATURAL = 88;
  /** RegularExpression Id. */
  int K_NEXT = 89;
  /** RegularExpression Id. */
  int K_NO = 90;
  /** RegularExpression Id. */
  int K_NOCYCLE = 91;
  /** RegularExpression Id. */
  int K_NOT = 92;
  /** RegularExpression Id. */
  int K_NOVALIDATE = 93;
  /** RegularExpression Id. */
  int K_NULL = 94;
  /** RegularExpression Id. */
  int K_NULLS = 95;
  /** RegularExpression Id. */
  int K_OF = 96;
  /** RegularExpression Id. */
  int K_OFFSET = 97;
  /** RegularExpression Id. */
  int K_ON = 98;
  /** RegularExpression Id. */
  int K_ONLY = 99;
  /** RegularExpression Id. */
  int K_OPEN = 100;
  /** RegularExpression Id. */
  int K_OR = 101;
  /** RegularExpression Id. */
  int K_ORDER = 102;
  /** RegularExpression Id. */
  int K_OUTER = 103;
  /** RegularExpression Id. */
  int K_OVER = 104;
  /** RegularExpression Id. */
  int K_PARTITION = 105;
  /** RegularExpression Id. */
  int K_PERCENT = 106;
  /** RegularExpression Id. */
  int K_PIVOT = 107;
  /** RegularExpression Id. */
  int K_PRECEDING = 108;
  /** RegularExpression Id. */
  int K_PRECISION = 109;
  /** RegularExpression Id. */
  int K_PRIMARY = 110;
  /** RegularExpression Id. */
  int K_PRIOR = 111;
  /** RegularExpression Id. */
  int K_RANGE = 112;
  /** RegularExpression Id. */
  int K_RECURSIVE = 113;
  /** RegularExpression Id. */
  int K_REFERENCES = 114;
  /** RegularExpression Id. */
  int K_REGEXP = 115;
  /** RegularExpression Id. */
  int K_RLIKE = 116;
  /** RegularExpression Id. */
  int K_REPLACE = 117;
  /** RegularExpression Id. */
  int K_RESTRICT = 118;
  /** RegularExpression Id. */
  int K_RETURNING = 119;
  /** RegularExpression Id. */
  int K_RIGHT = 120;
  /** RegularExpression Id. */
  int K_ROW = 121;
  /** RegularExpression Id. */
  int K_ROWS = 122;
  /** RegularExpression Id. */
  int K_SELECT = 123;
  /** RegularExpression Id. */
  int K_SEMI = 124;
  /** RegularExpression Id. */
  int K_SEPARATOR = 125;
  /** RegularExpression Id. */
  int K_SET = 126;
  /** RegularExpression Id. */
  int K_SIBLINGS = 127;
  /** RegularExpression Id. */
  int K_SKIP = 128;
  /** RegularExpression Id. */
  int K_SOME = 129;
  /** RegularExpression Id. */
  int K_START = 130;
  /** RegularExpression Id. */
  int K_TABLE = 131;
  /** RegularExpression Id. */
  int K_TABLESPACE = 132;
  /** RegularExpression Id. */
  int K_THEN = 133;
  /** RegularExpression Id. */
  int K_TEMP = 134;
  /** RegularExpression Id. */
  int K_TEMPORARY = 135;
  /** RegularExpression Id. */
  int K_TIME_KEY_EXPR = 136;
  /** RegularExpression Id. */
  int K_TOP = 137;
  /** RegularExpression Id. */
  int K_TRUNCATE = 138;
  /** RegularExpression Id. */
  int K_UNBOUNDED = 139;
  /** RegularExpression Id. */
  int K_UNION = 140;
  /** RegularExpression Id. */
  int K_UNIQUE = 141;
  /** RegularExpression Id. */
  int K_UNLOGGED = 142;
  /** RegularExpression Id. */
  int K_UPDATE = 143;
  /** RegularExpression Id. */
  int K_UPSERT = 144;
  /** RegularExpression Id. */
  int K_USE = 145;
  /** RegularExpression Id. */
  int K_SQL_CALC_FOUND_ROWS = 146;
  /** RegularExpression Id. */
  int K_USING = 147;
  /** RegularExpression Id. */
  int K_UNSIGNED = 148;
  /** RegularExpression Id. */
  int K_VALIDATE = 149;
  /** RegularExpression Id. */
  int K_VALUE = 150;
  /** RegularExpression Id. */
  int K_VALUES = 151;
  /** RegularExpression Id. */
  int K_VARYING = 152;
  /** RegularExpression Id. */
  int K_VIEW = 153;
  /** RegularExpression Id. */
  int K_WAIT = 154;
  /** RegularExpression Id. */
  int K_WHEN = 155;
  /** RegularExpression Id. */
  int K_WHERE = 156;
  /** RegularExpression Id. */
  int K_WITH = 157;
  /** RegularExpression Id. */
  int K_WITHIN = 158;
  /** RegularExpression Id. */
  int K_WITHOUT = 159;
  /** RegularExpression Id. */
  int K_XML = 160;
  /** RegularExpression Id. */
  int K_ZONE = 161;
  /** RegularExpression Id. */
  int ST_SEMICOLON = 162;
  /** RegularExpression Id. */
  int OP_GREATERTHANEQUALS = 163;
  /** RegularExpression Id. */
  int OP_MINORTHANEQUALS = 164;
  /** RegularExpression Id. */
  int OP_NOTEQUALSSTANDARD = 165;
  /** RegularExpression Id. */
  int OP_NOTEQUALSBANG = 166;
  /** RegularExpression Id. */
  int OP_CONCAT = 167;
  /** RegularExpression Id. */
  int DT_ZONE = 168;
  /** RegularExpression Id. */
  int S_DOUBLE = 169;
  /** RegularExpression Id. */
  int S_LONG = 170;
  /** RegularExpression Id. */
  int DIGIT = 171;
  /** RegularExpression Id. */
  int S_HEX = 172;
  /** RegularExpression Id. */
  int HEX_VALUE = 173;
  /** RegularExpression Id. */
  int LINE_COMMENT = 174;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 175;
  /** RegularExpression Id. */
  int S_IDENTIFIER = 176;
  /** RegularExpression Id. */
  int LETTER = 177;
  /** RegularExpression Id. */
  int PART_LETTER = 178;
  /** RegularExpression Id. */
  int S_CHAR_LITERAL = 179;
  /** RegularExpression Id. */
  int S_QUOTED_IDENTIFIER = 180;
  /** RegularExpression Id. */
  int ESC = 181;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "\"ACTION\"",
    "\"ADD\"",
    "\"ALL\"",
    "\"ALTER\"",
    "\"AND\"",
    "\"ANY\"",
    "\"AS\"",
    "\"ASC\"",
    "\"BEGIN\"",
    "\"BETWEEN\"",
    "\"BINARY\"",
    "\"BIT\"",
    "\"BY\"",
    "\"CALL\"",
    "\"CASCADE\"",
    "\"CASE\"",
    "\"CAST\"",
    "\"CHARACTER\"",
    "\"CHECK\"",
    "\"COLUMN\"",
    "\"COMMIT\"",
    "\"CONNECT\"",
    "\"CONSTRAINT\"",
    "\"CREATE\"",
    "\"CROSS\"",
    "\"CURRENT\"",
    "<K_DATETIMELITERAL>",
    "\"DEFERRABLE\"",
    "\"DELAYED\"",
    "\"DELETE\"",
    "\"DESC\"",
    "\"DISABLE\"",
    "\"DISTINCT\"",
    "\"DO\"",
    "\"DOUBLE\"",
    "\"DROP\"",
    "\"DUPLICATE\"",
    "\"ELSE\"",
    "\"ENABLE\"",
    "\"END\"",
    "\"ESCAPE\"",
    "\"EXCEPT\"",
    "\"EXCLUDE\"",
    "\"EXEC\"",
    "\"EXECUTE\"",
    "\"EXISTS\"",
    "\"EXTRACT\"",
    "\"FETCH\"",
    "\"FIRST\"",
    "\"FOLLOWING\"",
    "\"FOR\"",
    "\"FORCE\"",
    "\"FOREIGN\"",
    "\"FROM\"",
    "\"FULL\"",
    "\"FULLTEXT\"",
    "\"GROUP\"",
    "\"GROUP_CONCAT\"",
    "\"HAVING\"",
    "\"HIGH_PRIORITY\"",
    "\"IF\"",
    "\"IGNORE\"",
    "\"ILIKE\"",
    "\"IN\"",
    "\"INDEX\"",
    "\"INNER\"",
    "\"INSERT\"",
    "\"INTERSECT\"",
    "\"INTERVAL\"",
    "\"INTO\"",
    "\"IS\"",
    "\"ISNULL\"",
    "\"JOIN\"",
    "\"KEEP\"",
    "\"KEY\"",
    "\"LAST\"",
    "\"LATERAL\"",
    "\"LEFT\"",
    "\"LIKE\"",
    "\"LIMIT\"",
    "\"LOW_PRIORITY\"",
    "\"MATCHED\"",
    "\"MATERIALIZED\"",
    "\"MERGE\"",
    "\"MINUS\"",
    "\"MODIFY\"",
    "\"NATURAL\"",
    "\"NEXT\"",
    "\"NO\"",
    "\"NOCYCLE\"",
    "\"NOT\"",
    "\"NOVALIDATE\"",
    "\"NULL\"",
    "\"NULLS\"",
    "\"OF\"",
    "\"OFFSET\"",
    "\"ON\"",
    "\"ONLY\"",
    "\"OPEN\"",
    "\"OR\"",
    "\"ORDER\"",
    "\"OUTER\"",
    "\"OVER\"",
    "\"PARTITION\"",
    "\"PERCENT\"",
    "\"PIVOT\"",
    "\"PRECEDING\"",
    "\"PRECISION\"",
    "\"PRIMARY\"",
    "\"PRIOR\"",
    "\"RANGE\"",
    "\"RECURSIVE\"",
    "\"REFERENCES\"",
    "\"REGEXP\"",
    "\"RLIKE\"",
    "\"REPLACE\"",
    "\"RESTRICT\"",
    "\"RETURNING\"",
    "\"RIGHT\"",
    "\"ROW\"",
    "\"ROWS\"",
    "\"SELECT\"",
    "\"SEMI\"",
    "\"SEPARATOR\"",
    "\"SET\"",
    "\"SIBLINGS\"",
    "\"SKIP\"",
    "\"SOME\"",
    "\"START\"",
    "\"TABLE\"",
    "\"TABLESPACE\"",
    "\"THEN\"",
    "\"TEMP\"",
    "\"TEMPORARY\"",
    "<K_TIME_KEY_EXPR>",
    "\"TOP\"",
    "\"TRUNCATE\"",
    "\"UNBOUNDED\"",
    "\"UNION\"",
    "\"UNIQUE\"",
    "\"UNLOGGED\"",
    "\"UPDATE\"",
    "\"UPSERT\"",
    "\"USE\"",
    "\"SQL_CALC_FOUND_ROWS\"",
    "\"USING\"",
    "\"UNSIGNED\"",
    "\"VALIDATE\"",
    "\"VALUE\"",
    "\"VALUES\"",
    "\"VARYING\"",
    "\"VIEW\"",
    "\"WAIT\"",
    "\"WHEN\"",
    "\"WHERE\"",
    "\"WITH\"",
    "\"WITHIN\"",
    "\"WITHOUT\"",
    "\"XML\"",
    "\"ZONE\"",
    "\";\"",
    "<OP_GREATERTHANEQUALS>",
    "<OP_MINORTHANEQUALS>",
    "<OP_NOTEQUALSSTANDARD>",
    "<OP_NOTEQUALSBANG>",
    "<OP_CONCAT>",
    "<DT_ZONE>",
    "<S_DOUBLE>",
    "<S_LONG>",
    "<DIGIT>",
    "<S_HEX>",
    "<HEX_VALUE>",
    "<LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "<S_IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "<S_CHAR_LITERAL>",
    "<S_QUOTED_IDENTIFIER>",
    "<ESC>",
    "\"=\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"*\"",
    "\".\"",
    "\"?\"",
    "\":\"",
    "\"+\"",
    "\">\"",
    "\"<\"",
    "\"@@\"",
    "\"~\"",
    "\"~*\"",
    "\"!~\"",
    "\"!~*\"",
    "\"@>\"",
    "\"<@\"",
    "\"?|\"",
    "\"?&\"",
    "\"-\"",
    "\"-#\"",
    "\"|\"",
    "\"&\"",
    "\"<<\"",
    "\">>\"",
    "\"/\"",
    "\"%\"",
    "\"^\"",
    "\"{d\"",
    "\"}\"",
    "\"{t\"",
    "\"{ts\"",
    "\"::\"",
    "\"@\"",
    "\"->\"",
    "\"->>\"",
    "\"#>\"",
    "\"#>>\"",
    "\"{fn\"",
    "\"[\"",
    "\"]\"",
  };

}
