

================ ~ BEGIN ROBERT ~ ================

self.Car:color

===========================================
================ ~ Robert ~ ================


/*** BEGIN: self.Car:color ***/
SELECT TEMP_obj.val AS val, 'String' AS type, color AS res
FROM (
    /*** BEGIN: self ***/
    SELECT 1 AS val, self AS res, self AS ref_self, 'Car' AS type
    /*** END: self ***/
) AS TEMP_obj
LEFT JOIN Car
ON Car.Car_id = TEMP_obj.ref_self AND TEMP_obj.val = 1
/*** END: self.Car:color ***/
;

================ ~ //END ROBERT ~ ================



================ ~ BEGIN SIMPLE ~ ================

'Blue'

===========================================

================ ~ Simple ~ ================


/*** BEGIN: 'Blue' ***/
SELECT 1 AS val, 'Blue' AS res, 'String' AS type
/*** END: 'Blue' ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

1

===========================================

================ ~ Simple ~ ================


/*** BEGIN: 1 ***/
SELECT 1 AS val, 1 AS res, 'Integer' AS type
/*** END: 1 ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

true

===========================================

================ ~ Simple ~ ================


/*** BEGIN: true ***/
SELECT 1 AS val, true AS res, 'Boolean' AS type
/*** END: true ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

self.color

===========================================

================ ~ Simple ~ ================


/*** BEGIN: self.color ***/
SELECT TEMP_OBJ.val AS val, 'String' AS type, Car.color AS res
FROM (
    /*** BEGIN: self ***/
    SELECT 1 AS val, 'self' AS res, 'self' AS ref_self, 'Car' AS type
    /*** END: self ***/
) AS TEMP_OBJ
LEFT JOIN Car
ON TEMP_OBJ.ref_self = Car.Car_id AND TEMP_OBJ.val = 1
/*** END: self.color ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

self.owners

===========================================

================ ~ Simple ~ ================


/*** BEGIN: self.owners ***/
SELECT CASE Ownership.ownedCars IS NULL WHEN 1 THEN 0 ELSE 1 END AS val, Ownership.owners AS res, CASE Ownership.ownedCars IS NULL WHEN 1 THEN 'EmptyCol' ELSE 'Person' END AS type
FROM (
    /*** BEGIN: self ***/
    SELECT 1 AS val, 'self' AS res, 'self' AS ref_self, 'Car' AS type
    /*** END: self ***/
) AS TEMP_OBJ
LEFT JOIN Ownership
ON TEMP_OBJ.ref_self = Ownership.ownedCars AND TEMP_OBJ.val = 1
/*** END: self.owners ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances() ***/
SELECT 1 AS val, Car_id AS res, 'Car' AS type
FROM Car
/*** END: Car.allInstances() ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->collect(c| c.color)

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->collect(c| c.color) ***/
SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
FROM (
    /*** BEGIN: c.color ***/
    SELECT TEMP_OBJ.val AS val, 'String' AS type, Car.color AS res, TEMP_OBJ.ref_c AS ref_c
    FROM (
        /*** BEGIN: c ***/
        SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
        FROM (
            /*** BEGIN: Car.allInstances() ***/
            SELECT 1 AS val, Car_id AS res, 'Car' AS type
            FROM Car
            /*** END: Car.allInstances() ***/
        ) AS TEMP_DMN
        /*** END: c ***/
    ) AS TEMP_OBJ
    LEFT JOIN Car
    ON TEMP_OBJ.ref_c = Car.Car_id AND TEMP_OBJ.val = 1
    /*** END: c.color ***/
) AS TEMP_body
/*** END: Car.allInstances()->collect(c| c.color) ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->collect(c| c.color)->exists(c| c ='yellow')

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->collect(c| c.color)->exists(c| c ='yellow') ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: c ='yellow' ***/
    SELECT TEMP_LEFT.res = TEMP_RIGHT.res AS res, 'Boolean' AS type, CASE TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 WHEN 1 THEN 0 ELSE 1 END AS val, TEMP_LEFT.ref_c AS ref_c
    FROM (
        /*** BEGIN: c ***/
        SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'String' AS type, TEMP_DMN.res AS ref_c
        FROM (
            /*** BEGIN: Car.allInstances()->collect(c| c.color) ***/
            SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
            FROM (
                /*** BEGIN: c.color ***/
                SELECT TEMP_OBJ.val AS val, 'String' AS type, Car.color AS res, TEMP_OBJ.ref_c AS ref_c
                FROM (
                    /*** BEGIN: c ***/
                    SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
                    FROM (
                        /*** BEGIN: Car.allInstances() ***/
                        SELECT 1 AS val, Car_id AS res, 'Car' AS type
                        FROM Car
                        /*** END: Car.allInstances() ***/
                    ) AS TEMP_DMN
                    /*** END: c ***/
                ) AS TEMP_OBJ
                LEFT JOIN Car
                ON TEMP_OBJ.ref_c = Car.Car_id AND TEMP_OBJ.val = 1
                /*** END: c.color ***/
            ) AS TEMP_body
            /*** END: Car.allInstances()->collect(c| c.color) ***/
        ) AS TEMP_DMN
        /*** END: c ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 'yellow' ***/
        SELECT 1 AS val, 'yellow' AS res, 'String' AS type
        /*** END: 'yellow' ***/
    ) AS TEMP_RIGHT
    /*** END: c ='yellow' ***/
) AS TEMP_BODY
WHERE TEMP_BODY.res = 1
/*** END: Car.allInstances()->collect(c| c.color)->exists(c| c ='yellow') ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->collect(c| c.color.oclIsUndefined())

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->collect(c| c.color.oclIsUndefined()) ***/
SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
FROM (
    /*** BEGIN: c.color.oclIsUndefined() ***/
    SELECT TEMP_SOURCE.val AS val, CASE TEMP_SOURCE.val = 0 WHEN 1 THEN NULL ELSE TEMP_SOURCE.res IS NULL END AS res, 'Boolean' AS type, TEMP_SOURCE.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.color ***/
        SELECT TEMP_OBJ.val AS val, 'String' AS type, Car.color AS res, TEMP_OBJ.ref_c AS ref_c
        FROM (
            /*** BEGIN: c ***/
            SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
            FROM (
                /*** BEGIN: Car.allInstances() ***/
                SELECT 1 AS val, Car_id AS res, 'Car' AS type
                FROM Car
                /*** END: Car.allInstances() ***/
            ) AS TEMP_DMN
            /*** END: c ***/
        ) AS TEMP_OBJ
        LEFT JOIN Car
        ON TEMP_OBJ.ref_c = Car.Car_id AND TEMP_OBJ.val = 1
        /*** END: c.color ***/
    ) AS TEMP_SOURCE
    /*** END: c.color.oclIsUndefined() ***/
) AS TEMP_body
/*** END: Car.allInstances()->collect(c| c.color.oclIsUndefined()) ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->collect(c| c.owners)->flatten()->collect(p| p.ownedCars)->size()=5

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->collect(c| c.owners)->flatten()->collect(p| p.ownedCars)->size()=5 ***/
SELECT TEMP_LEFT.res = TEMP_RIGHT.res AS res, 'Boolean' AS type, 1 AS val
FROM (
    /*** BEGIN: Car.allInstances()->collect(c| c.owners)->flatten()->collect(p| p.ownedCars)->size() ***/
    SELECT 1 AS val, 'Integer' AS type, COUNT(*) AS res
    FROM (
        /*** BEGIN: Car.allInstances()->collect(c| c.owners)->flatten()->collect(p| p.ownedCars) ***/
        SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
        FROM (
            /*** BEGIN: p.ownedCars ***/
            SELECT CASE Ownership.owners IS NULL WHEN 1 THEN 0 ELSE 1 END AS val, Ownership.ownedCars AS res, CASE Ownership.owners IS NULL WHEN 1 THEN 'EmptyCol' ELSE 'Car' END AS type, TEMP_OBJ.ref_p AS ref_p
            FROM (
                /*** BEGIN: p ***/
                SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Person' AS type, TEMP_DMN.res AS ref_p
                FROM (
                    /*** BEGIN: Car.allInstances()->collect(c| c.owners)->flatten() ***/
                    SELECT 1 AS val, TEMP_SOURCE.res AS res, TEMP_SOURCE.type AS type
                    FROM (
                        /*** BEGIN: Car.allInstances()->collect(c| c.owners) ***/
                        SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
                        FROM (
                            /*** BEGIN: c.owners ***/
                            SELECT CASE Ownership.ownedCars IS NULL WHEN 1 THEN 0 ELSE 1 END AS val, Ownership.owners AS res, CASE Ownership.ownedCars IS NULL WHEN 1 THEN 'EmptyCol' ELSE 'Person' END AS type, TEMP_OBJ.ref_c AS ref_c
                            FROM (
                                /*** BEGIN: c ***/
                                SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
                                FROM (
                                    /*** BEGIN: Car.allInstances() ***/
                                    SELECT 1 AS val, Car_id AS res, 'Car' AS type
                                    FROM Car
                                    /*** END: Car.allInstances() ***/
                                ) AS TEMP_DMN
                                /*** END: c ***/
                            ) AS TEMP_OBJ
                            LEFT JOIN Ownership
                            ON TEMP_OBJ.ref_c = Ownership.ownedCars AND TEMP_OBJ.val = 1
                            /*** END: c.owners ***/
                        ) AS TEMP_body
                        /*** END: Car.allInstances()->collect(c| c.owners) ***/
                    ) AS TEMP_SOURCE
                    WHERE TEMP_SOURCE.val = 1
                    /*** END: Car.allInstances()->collect(c| c.owners)->flatten() ***/
                ) AS TEMP_DMN
                /*** END: p ***/
            ) AS TEMP_OBJ
            LEFT JOIN Ownership
            ON TEMP_OBJ.ref_p = Ownership.owners AND TEMP_OBJ.val = 1
            /*** END: p.ownedCars ***/
        ) AS TEMP_body
        /*** END: Car.allInstances()->collect(c| c.owners)->flatten()->collect(p| p.ownedCars) ***/
    ) AS TEMP_src
    /*** END: Car.allInstances()->collect(c| c.owners)->flatten()->collect(p| p.ownedCars)->size() ***/
) AS TEMP_LEFT
JOIN (
    /*** BEGIN: 5 ***/
    SELECT 1 AS val, 5 AS res, 'Integer' AS type
    /*** END: 5 ***/
) AS TEMP_RIGHT
/*** END: Car.allInstances()->collect(c| c.owners)->flatten()->collect(p| p.ownedCars)->size()=5 ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->collect(c| c.owners)->flatten()->forAll(p| p.name='Hoang')

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->collect(c| c.owners)->flatten()->forAll(p| p.name='Hoang') ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: p.name='Hoang' ***/
    SELECT TEMP_LEFT.res = TEMP_RIGHT.res AS res, 'Boolean' AS type, CASE TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 WHEN 1 THEN 0 ELSE 1 END AS val, TEMP_LEFT.ref_p AS ref_p
    FROM (
        /*** BEGIN: p.name ***/
        SELECT TEMP_OBJ.val AS val, 'String' AS type, Person.name AS res, TEMP_OBJ.ref_p AS ref_p
        FROM (
            /*** BEGIN: p ***/
            SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Person' AS type, TEMP_DMN.res AS ref_p
            FROM (
                /*** BEGIN: Car.allInstances()->collect(c| c.owners)->flatten() ***/
                SELECT 1 AS val, TEMP_SOURCE.res AS res, TEMP_SOURCE.type AS type
                FROM (
                    /*** BEGIN: Car.allInstances()->collect(c| c.owners) ***/
                    SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
                    FROM (
                        /*** BEGIN: c.owners ***/
                        SELECT CASE Ownership.ownedCars IS NULL WHEN 1 THEN 0 ELSE 1 END AS val, Ownership.owners AS res, CASE Ownership.ownedCars IS NULL WHEN 1 THEN 'EmptyCol' ELSE 'Person' END AS type, TEMP_OBJ.ref_c AS ref_c
                        FROM (
                            /*** BEGIN: c ***/
                            SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
                            FROM (
                                /*** BEGIN: Car.allInstances() ***/
                                SELECT 1 AS val, Car_id AS res, 'Car' AS type
                                FROM Car
                                /*** END: Car.allInstances() ***/
                            ) AS TEMP_DMN
                            /*** END: c ***/
                        ) AS TEMP_OBJ
                        LEFT JOIN Ownership
                        ON TEMP_OBJ.ref_c = Ownership.ownedCars AND TEMP_OBJ.val = 1
                        /*** END: c.owners ***/
                    ) AS TEMP_body
                    /*** END: Car.allInstances()->collect(c| c.owners) ***/
                ) AS TEMP_SOURCE
                WHERE TEMP_SOURCE.val = 1
                /*** END: Car.allInstances()->collect(c| c.owners)->flatten() ***/
            ) AS TEMP_DMN
            /*** END: p ***/
        ) AS TEMP_OBJ
        LEFT JOIN Person
        ON TEMP_OBJ.ref_p = Person.Person_id AND TEMP_OBJ.val = 1
        /*** END: p.name ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 'Hoang' ***/
        SELECT 1 AS val, 'Hoang' AS res, 'String' AS type
        /*** END: 'Hoang' ***/
    ) AS TEMP_RIGHT
    /*** END: p.name='Hoang' ***/
) AS TEMP_BODY
WHERE TEMP_BODY.res = 0
/*** END: Car.allInstances()->collect(c| c.owners)->flatten()->forAll(p| p.name='Hoang') ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->collect(c| c.owners.oclIsUndefined())

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->collect(c| c.owners.oclIsUndefined()) ***/
SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
FROM (
    /*** BEGIN: c.owners.oclIsUndefined() ***/
    SELECT TEMP_SOURCE.val AS val, CASE TEMP_SOURCE.val = 0 WHEN 1 THEN NULL ELSE TEMP_SOURCE.res IS NULL END AS res, 'Boolean' AS type, TEMP_SOURCE.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.owners ***/
        SELECT CASE Ownership.ownedCars IS NULL WHEN 1 THEN 0 ELSE 1 END AS val, Ownership.owners AS res, CASE Ownership.ownedCars IS NULL WHEN 1 THEN 'EmptyCol' ELSE 'Person' END AS type, TEMP_OBJ.ref_c AS ref_c
        FROM (
            /*** BEGIN: c ***/
            SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
            FROM (
                /*** BEGIN: Car.allInstances() ***/
                SELECT 1 AS val, Car_id AS res, 'Car' AS type
                FROM Car
                /*** END: Car.allInstances() ***/
            ) AS TEMP_DMN
            /*** END: c ***/
        ) AS TEMP_OBJ
        LEFT JOIN Ownership
        ON TEMP_OBJ.ref_c = Ownership.ownedCars AND TEMP_OBJ.val = 1
        /*** END: c.owners ***/
    ) AS TEMP_SOURCE
    /*** END: c.owners.oclIsUndefined() ***/
) AS TEMP_body
/*** END: Car.allInstances()->collect(c| c.owners.oclIsUndefined()) ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->collect(c| false)->size() > 0

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->collect(c| false)->size() > 0 ***/
SELECT TEMP_LEFT.res > TEMP_RIGHT.res AS res, 'Boolean' AS type, 1 AS val
FROM (
    /*** BEGIN: Car.allInstances()->collect(c| false)->size() ***/
    SELECT 1 AS val, 'Integer' AS type, COUNT(*) AS res
    FROM (
        /*** BEGIN: Car.allInstances()->collect(c| false) ***/
        SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
        FROM (
            /*** BEGIN: Car.allInstances() ***/
            SELECT 1 AS val, Car_id AS res, 'Car' AS type
            FROM Car
            /*** END: Car.allInstances() ***/
        ) AS TEMP_source
        JOIN (
            /*** BEGIN: false ***/
            SELECT 1 AS val, false AS res, 'Boolean' AS type
            /*** END: false ***/
        ) AS TEMP_body
        /*** END: Car.allInstances()->collect(c| false) ***/
    ) AS TEMP_src
    /*** END: Car.allInstances()->collect(c| false)->size() ***/
) AS TEMP_LEFT
JOIN (
    /*** BEGIN: 0 ***/
    SELECT 1 AS val, 0 AS res, 'Integer' AS type
    /*** END: 0 ***/
) AS TEMP_RIGHT
/*** END: Car.allInstances()->collect(c| false)->size() > 0 ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->exists(c| c.color = 'blue' )

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->exists(c| c.color = 'blue') ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: c.color = 'blue' ***/
    SELECT TEMP_LEFT.res = TEMP_RIGHT.res AS res, 'Boolean' AS type, CASE TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 WHEN 1 THEN 0 ELSE 1 END AS val, TEMP_LEFT.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.color ***/
        SELECT TEMP_OBJ.val AS val, 'String' AS type, Car.color AS res, TEMP_OBJ.ref_c AS ref_c
        FROM (
            /*** BEGIN: c ***/
            SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
            FROM (
                /*** BEGIN: Car.allInstances() ***/
                SELECT 1 AS val, Car_id AS res, 'Car' AS type
                FROM Car
                /*** END: Car.allInstances() ***/
            ) AS TEMP_DMN
            /*** END: c ***/
        ) AS TEMP_OBJ
        LEFT JOIN Car
        ON TEMP_OBJ.ref_c = Car.Car_id AND TEMP_OBJ.val = 1
        /*** END: c.color ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 'blue' ***/
        SELECT 1 AS val, 'blue' AS res, 'String' AS type
        /*** END: 'blue' ***/
    ) AS TEMP_RIGHT
    /*** END: c.color = 'blue' ***/
) AS TEMP_BODY
WHERE TEMP_BODY.res = 1
/*** END: Car.allInstances()->exists(c| c.color = 'blue') ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->exists(c| c.owners->collect(p| p.ownedCars)->size() < 2)

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->exists(c| c.owners->collect(p| p.ownedCars)->size() < 2) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: c.owners->collect(p| p.ownedCars)->size() < 2 ***/
    SELECT TEMP_LEFT.res < TEMP_RIGHT.res AS res, 'Boolean' AS type, CASE TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 WHEN 1 THEN 0 ELSE 1 END AS val, TEMP_LEFT.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.owners->collect(p| p.ownedCars)->size() ***/
        SELECT 1 AS val, 'Integer' AS type, CASE TEMP_src.val = 0 WHEN 1 THEN 0 ELSE COUNT(*) END AS res, TEMP_src.ref_c AS ref_c
        FROM (
            /*** BEGIN: c.owners->collect(p| p.ownedCars) ***/
            SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type, TEMP_body.ref_c AS ref_c
            FROM (
                /*** BEGIN: p.ownedCars ***/
                SELECT CASE Ownership.owners IS NULL WHEN 1 THEN 0 ELSE 1 END AS val, Ownership.ownedCars AS res, CASE Ownership.owners IS NULL WHEN 1 THEN 'EmptyCol' ELSE 'Car' END AS type, TEMP_OBJ.ref_p AS ref_p, TEMP_OBJ.ref_c AS ref_c
                FROM (
                    /*** BEGIN: p ***/
                    SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Person' AS type, TEMP_DMN.res AS ref_p, TEMP_DMN.ref_c AS ref_c
                    FROM (
                        /*** BEGIN: c.owners ***/
                        SELECT CASE Ownership.ownedCars IS NULL WHEN 1 THEN 0 ELSE 1 END AS val, Ownership.owners AS res, CASE Ownership.ownedCars IS NULL WHEN 1 THEN 'EmptyCol' ELSE 'Person' END AS type, TEMP_OBJ.ref_c AS ref_c
                        FROM (
                            /*** BEGIN: c ***/
                            SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
                            FROM (
                                /*** BEGIN: Car.allInstances() ***/
                                SELECT 1 AS val, Car_id AS res, 'Car' AS type
                                FROM Car
                                /*** END: Car.allInstances() ***/
                            ) AS TEMP_DMN
                            /*** END: c ***/
                        ) AS TEMP_OBJ
                        LEFT JOIN Ownership
                        ON TEMP_OBJ.ref_c = Ownership.ownedCars AND TEMP_OBJ.val = 1
                        /*** END: c.owners ***/
                    ) AS TEMP_DMN
                    /*** END: p ***/
                ) AS TEMP_OBJ
                LEFT JOIN Ownership
                ON TEMP_OBJ.ref_p = Ownership.owners AND TEMP_OBJ.val = 1
                /*** END: p.ownedCars ***/
            ) AS TEMP_body
            /*** END: c.owners->collect(p| p.ownedCars) ***/
        ) AS TEMP_src
        GROUP BY TEMP_src.ref_c, TEMP_src.val
        /*** END: c.owners->collect(p| p.ownedCars)->size() ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 2 ***/
        SELECT 1 AS val, 2 AS res, 'Integer' AS type
        /*** END: 2 ***/
    ) AS TEMP_RIGHT
    /*** END: c.owners->collect(p| p.ownedCars)->size() < 2 ***/
) AS TEMP_BODY
WHERE TEMP_BODY.res = 1
/*** END: Car.allInstances()->exists(c| c.owners->collect(p| p.ownedCars)->size() < 2) ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->exists(c| c.owners->exists(p| p.name='Chau'))

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->exists(c| c.owners->exists(p| p.name='Chau')) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: c.owners->exists(p| p.name='Chau') ***/
    SELECT 1 AS val, 'Boolean' AS type, CASE TEMP_SOURCE.ref_p IS NULL WHEN 1 THEN 1 ELSE TEMP_BODY.res END AS res, TEMP_SOURCE.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.owners ***/
        SELECT CASE Ownership.ownedCars IS NULL WHEN 1 THEN 0 ELSE 1 END AS val, Ownership.owners AS res, CASE Ownership.ownedCars IS NULL WHEN 1 THEN 'EmptyCol' ELSE 'Person' END AS type, TEMP_OBJ.ref_c AS ref_c
        FROM (
            /*** BEGIN: c ***/
            SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
            FROM (
                /*** BEGIN: Car.allInstances() ***/
                SELECT 1 AS val, Car_id AS res, 'Car' AS type
                FROM Car
                /*** END: Car.allInstances() ***/
            ) AS TEMP_DMN
            /*** END: c ***/
        ) AS TEMP_OBJ
        LEFT JOIN Ownership
        ON TEMP_OBJ.ref_c = Ownership.ownedCars AND TEMP_OBJ.val = 1
        /*** END: c.owners ***/
    ) AS TEMP_SOURCE
    LEFT JOIN (SELECT COUNT(*) > 0 AS res, TEMP_BODY.ref_c AS ref_c
    FROM (
        /*** BEGIN: p.name='Chau' ***/
        SELECT TEMP_LEFT.res = TEMP_RIGHT.res AS res, 'Boolean' AS type, CASE TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 WHEN 1 THEN 0 ELSE 1 END AS val, TEMP_LEFT.ref_p AS ref_p, TEMP_LEFT.ref_c AS ref_c
        FROM (
            /*** BEGIN: p.name ***/
            SELECT TEMP_OBJ.val AS val, 'String' AS type, Person.name AS res, TEMP_OBJ.ref_p AS ref_p, TEMP_OBJ.ref_c AS ref_c
            FROM (
                /*** BEGIN: p ***/
                SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Person' AS type, TEMP_DMN.res AS ref_p, TEMP_DMN.ref_c AS ref_c
                FROM (
                    /*** BEGIN: c.owners ***/
                    SELECT CASE Ownership.ownedCars IS NULL WHEN 1 THEN 0 ELSE 1 END AS val, Ownership.owners AS res, CASE Ownership.ownedCars IS NULL WHEN 1 THEN 'EmptyCol' ELSE 'Person' END AS type, TEMP_OBJ.ref_c AS ref_c
                    FROM (
                        /*** BEGIN: c ***/
                        SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
                        FROM (
                            /*** BEGIN: Car.allInstances() ***/
                            SELECT 1 AS val, Car_id AS res, 'Car' AS type
                            FROM Car
                            /*** END: Car.allInstances() ***/
                        ) AS TEMP_DMN
                        /*** END: c ***/
                    ) AS TEMP_OBJ
                    LEFT JOIN Ownership
                    ON TEMP_OBJ.ref_c = Ownership.ownedCars AND TEMP_OBJ.val = 1
                    /*** END: c.owners ***/
                ) AS TEMP_DMN
                /*** END: p ***/
            ) AS TEMP_OBJ
            LEFT JOIN Person
            ON TEMP_OBJ.ref_p = Person.Person_id AND TEMP_OBJ.val = 1
            /*** END: p.name ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'Chau' ***/
            SELECT 1 AS val, 'Chau' AS res, 'String' AS type
            /*** END: 'Chau' ***/
        ) AS TEMP_RIGHT
        /*** END: p.name='Chau' ***/
    ) AS TEMP_BODY
    GROUP BY TEMP_BODY.ref_c) AS TEMP_BODY
    ON TEMP_SOURCE.ref_c = TEMP_BODY.ref_c
    WHERE TEMP_BODY.res = 1
    /*** END: c.owners->exists(p| p.name='Chau') ***/
) AS TEMP_BODY
WHERE TEMP_BODY.res = 1
/*** END: Car.allInstances()->exists(c| c.owners->exists(p| p.name='Chau')) ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->exists(c| c.owners->forAll(p| p.name='Hoang'))

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->exists(c| c.owners->forAll(p| p.name='Hoang')) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: c.owners->forAll(p| p.name='Hoang') ***/
    SELECT 1 AS val, 'Boolean' AS type, CASE TEMP_SOURCE.ref_p IS NULL WHEN 1 THEN 1 ELSE TEMP_BODY.res END AS res, TEMP_SOURCE.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.owners ***/
        SELECT CASE Ownership.ownedCars IS NULL WHEN 1 THEN 0 ELSE 1 END AS val, Ownership.owners AS res, CASE Ownership.ownedCars IS NULL WHEN 1 THEN 'EmptyCol' ELSE 'Person' END AS type, TEMP_OBJ.ref_c AS ref_c
        FROM (
            /*** BEGIN: c ***/
            SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
            FROM (
                /*** BEGIN: Car.allInstances() ***/
                SELECT 1 AS val, Car_id AS res, 'Car' AS type
                FROM Car
                /*** END: Car.allInstances() ***/
            ) AS TEMP_DMN
            /*** END: c ***/
        ) AS TEMP_OBJ
        LEFT JOIN Ownership
        ON TEMP_OBJ.ref_c = Ownership.ownedCars AND TEMP_OBJ.val = 1
        /*** END: c.owners ***/
    ) AS TEMP_SOURCE
    LEFT JOIN (SELECT COUNT(*) = 0 AS res, TEMP_BODY.ref_c AS ref_c
    FROM (
        /*** BEGIN: p.name='Hoang' ***/
        SELECT TEMP_LEFT.res = TEMP_RIGHT.res AS res, 'Boolean' AS type, CASE TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 WHEN 1 THEN 0 ELSE 1 END AS val, TEMP_LEFT.ref_p AS ref_p, TEMP_LEFT.ref_c AS ref_c
        FROM (
            /*** BEGIN: p.name ***/
            SELECT TEMP_OBJ.val AS val, 'String' AS type, Person.name AS res, TEMP_OBJ.ref_p AS ref_p, TEMP_OBJ.ref_c AS ref_c
            FROM (
                /*** BEGIN: p ***/
                SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Person' AS type, TEMP_DMN.res AS ref_p, TEMP_DMN.ref_c AS ref_c
                FROM (
                    /*** BEGIN: c.owners ***/
                    SELECT CASE Ownership.ownedCars IS NULL WHEN 1 THEN 0 ELSE 1 END AS val, Ownership.owners AS res, CASE Ownership.ownedCars IS NULL WHEN 1 THEN 'EmptyCol' ELSE 'Person' END AS type, TEMP_OBJ.ref_c AS ref_c
                    FROM (
                        /*** BEGIN: c ***/
                        SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
                        FROM (
                            /*** BEGIN: Car.allInstances() ***/
                            SELECT 1 AS val, Car_id AS res, 'Car' AS type
                            FROM Car
                            /*** END: Car.allInstances() ***/
                        ) AS TEMP_DMN
                        /*** END: c ***/
                    ) AS TEMP_OBJ
                    LEFT JOIN Ownership
                    ON TEMP_OBJ.ref_c = Ownership.ownedCars AND TEMP_OBJ.val = 1
                    /*** END: c.owners ***/
                ) AS TEMP_DMN
                /*** END: p ***/
            ) AS TEMP_OBJ
            LEFT JOIN Person
            ON TEMP_OBJ.ref_p = Person.Person_id AND TEMP_OBJ.val = 1
            /*** END: p.name ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'Hoang' ***/
            SELECT 1 AS val, 'Hoang' AS res, 'String' AS type
            /*** END: 'Hoang' ***/
        ) AS TEMP_RIGHT
        /*** END: p.name='Hoang' ***/
    ) AS TEMP_BODY
    GROUP BY TEMP_BODY.ref_c) AS TEMP_BODY
    ON TEMP_SOURCE.ref_c = TEMP_BODY.ref_c
    WHERE IFNULL(TEMP_BODY.res, 0) = 0 AND TEMP_BODY.val = 1
    /*** END: c.owners->forAll(p| p.name='Hoang') ***/
) AS TEMP_BODY
WHERE TEMP_BODY.res = 1
/*** END: Car.allInstances()->exists(c| c.owners->forAll(p| p.name='Hoang')) ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->exists(c| true)

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->exists(c| true) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: Car.allInstances() ***/
    SELECT 1 AS val, Car_id AS res, 'Car' AS type
    FROM Car
    /*** END: Car.allInstances() ***/
) AS TEMP_SOURCE
JOIN (
    /*** BEGIN: true ***/
    SELECT 1 AS val, true AS res, 'Boolean' AS type
    /*** END: true ***/
) AS TEMP_BODY
WHERE TEMP_BODY.res = 1
/*** END: Car.allInstances()->exists(c| true) ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->forAll(c| c.color <> 'blue' )

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->forAll(c| c.color <> 'blue') ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: c.color <> 'blue' ***/
    SELECT TEMP_LEFT.res <> TEMP_RIGHT.res AS res, 'Boolean' AS type, CASE TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 WHEN 1 THEN 0 ELSE 1 END AS val, TEMP_LEFT.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.color ***/
        SELECT TEMP_OBJ.val AS val, 'String' AS type, Car.color AS res, TEMP_OBJ.ref_c AS ref_c
        FROM (
            /*** BEGIN: c ***/
            SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
            FROM (
                /*** BEGIN: Car.allInstances() ***/
                SELECT 1 AS val, Car_id AS res, 'Car' AS type
                FROM Car
                /*** END: Car.allInstances() ***/
            ) AS TEMP_DMN
            /*** END: c ***/
        ) AS TEMP_OBJ
        LEFT JOIN Car
        ON TEMP_OBJ.ref_c = Car.Car_id AND TEMP_OBJ.val = 1
        /*** END: c.color ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 'blue' ***/
        SELECT 1 AS val, 'blue' AS res, 'String' AS type
        /*** END: 'blue' ***/
    ) AS TEMP_RIGHT
    /*** END: c.color <> 'blue' ***/
) AS TEMP_BODY
WHERE TEMP_BODY.res = 0
/*** END: Car.allInstances()->forAll(c| c.color <> 'blue') ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->forAll(c| c.owners->collect(p| p.name='Chau')->size() > 1)

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->forAll(c| c.owners->collect(p| p.name='Chau')->size() > 1) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: c.owners->collect(p| p.name='Chau')->size() > 1 ***/
    SELECT TEMP_LEFT.res > TEMP_RIGHT.res AS res, 'Boolean' AS type, CASE TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 WHEN 1 THEN 0 ELSE 1 END AS val, TEMP_LEFT.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.owners->collect(p| p.name='Chau')->size() ***/
        SELECT 1 AS val, 'Integer' AS type, CASE TEMP_src.val = 0 WHEN 1 THEN 0 ELSE COUNT(*) END AS res, TEMP_src.ref_c AS ref_c
        FROM (
            /*** BEGIN: c.owners->collect(p| p.name='Chau') ***/
            SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type, TEMP_body.ref_c AS ref_c
            FROM (
                /*** BEGIN: p.name='Chau' ***/
                SELECT TEMP_LEFT.res = TEMP_RIGHT.res AS res, 'Boolean' AS type, CASE TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 WHEN 1 THEN 0 ELSE 1 END AS val, TEMP_LEFT.ref_p AS ref_p, TEMP_LEFT.ref_c AS ref_c
                FROM (
                    /*** BEGIN: p.name ***/
                    SELECT TEMP_OBJ.val AS val, 'String' AS type, Person.name AS res, TEMP_OBJ.ref_p AS ref_p, TEMP_OBJ.ref_c AS ref_c
                    FROM (
                        /*** BEGIN: p ***/
                        SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Person' AS type, TEMP_DMN.res AS ref_p, TEMP_DMN.ref_c AS ref_c
                        FROM (
                            /*** BEGIN: c.owners ***/
                            SELECT CASE Ownership.ownedCars IS NULL WHEN 1 THEN 0 ELSE 1 END AS val, Ownership.owners AS res, CASE Ownership.ownedCars IS NULL WHEN 1 THEN 'EmptyCol' ELSE 'Person' END AS type, TEMP_OBJ.ref_c AS ref_c
                            FROM (
                                /*** BEGIN: c ***/
                                SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
                                FROM (
                                    /*** BEGIN: Car.allInstances() ***/
                                    SELECT 1 AS val, Car_id AS res, 'Car' AS type
                                    FROM Car
                                    /*** END: Car.allInstances() ***/
                                ) AS TEMP_DMN
                                /*** END: c ***/
                            ) AS TEMP_OBJ
                            LEFT JOIN Ownership
                            ON TEMP_OBJ.ref_c = Ownership.ownedCars AND TEMP_OBJ.val = 1
                            /*** END: c.owners ***/
                        ) AS TEMP_DMN
                        /*** END: p ***/
                    ) AS TEMP_OBJ
                    LEFT JOIN Person
                    ON TEMP_OBJ.ref_p = Person.Person_id AND TEMP_OBJ.val = 1
                    /*** END: p.name ***/
                ) AS TEMP_LEFT
                JOIN (
                    /*** BEGIN: 'Chau' ***/
                    SELECT 1 AS val, 'Chau' AS res, 'String' AS type
                    /*** END: 'Chau' ***/
                ) AS TEMP_RIGHT
                /*** END: p.name='Chau' ***/
            ) AS TEMP_body
            /*** END: c.owners->collect(p| p.name='Chau') ***/
        ) AS TEMP_src
        GROUP BY TEMP_src.ref_c, TEMP_src.val
        /*** END: c.owners->collect(p| p.name='Chau')->size() ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 1 ***/
        SELECT 1 AS val, 1 AS res, 'Integer' AS type
        /*** END: 1 ***/
    ) AS TEMP_RIGHT
    /*** END: c.owners->collect(p| p.name='Chau')->size() > 1 ***/
) AS TEMP_BODY
WHERE TEMP_BODY.res = 0
/*** END: Car.allInstances()->forAll(c| c.owners->collect(p| p.name='Chau')->size() > 1) ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->forAll(c| c.owners->exists(p| p.name='Hoang'))

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->forAll(c| c.owners->exists(p| p.name='Hoang')) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: c.owners->exists(p| p.name='Hoang') ***/
    SELECT 1 AS val, 'Boolean' AS type, CASE TEMP_SOURCE.ref_p IS NULL WHEN 1 THEN 1 ELSE TEMP_BODY.res END AS res, TEMP_SOURCE.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.owners ***/
        SELECT CASE Ownership.ownedCars IS NULL WHEN 1 THEN 0 ELSE 1 END AS val, Ownership.owners AS res, CASE Ownership.ownedCars IS NULL WHEN 1 THEN 'EmptyCol' ELSE 'Person' END AS type, TEMP_OBJ.ref_c AS ref_c
        FROM (
            /*** BEGIN: c ***/
            SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
            FROM (
                /*** BEGIN: Car.allInstances() ***/
                SELECT 1 AS val, Car_id AS res, 'Car' AS type
                FROM Car
                /*** END: Car.allInstances() ***/
            ) AS TEMP_DMN
            /*** END: c ***/
        ) AS TEMP_OBJ
        LEFT JOIN Ownership
        ON TEMP_OBJ.ref_c = Ownership.ownedCars AND TEMP_OBJ.val = 1
        /*** END: c.owners ***/
    ) AS TEMP_SOURCE
    LEFT JOIN (SELECT COUNT(*) > 0 AS res, TEMP_BODY.ref_c AS ref_c
    FROM (
        /*** BEGIN: p.name='Hoang' ***/
        SELECT TEMP_LEFT.res = TEMP_RIGHT.res AS res, 'Boolean' AS type, CASE TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 WHEN 1 THEN 0 ELSE 1 END AS val, TEMP_LEFT.ref_p AS ref_p, TEMP_LEFT.ref_c AS ref_c
        FROM (
            /*** BEGIN: p.name ***/
            SELECT TEMP_OBJ.val AS val, 'String' AS type, Person.name AS res, TEMP_OBJ.ref_p AS ref_p, TEMP_OBJ.ref_c AS ref_c
            FROM (
                /*** BEGIN: p ***/
                SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Person' AS type, TEMP_DMN.res AS ref_p, TEMP_DMN.ref_c AS ref_c
                FROM (
                    /*** BEGIN: c.owners ***/
                    SELECT CASE Ownership.ownedCars IS NULL WHEN 1 THEN 0 ELSE 1 END AS val, Ownership.owners AS res, CASE Ownership.ownedCars IS NULL WHEN 1 THEN 'EmptyCol' ELSE 'Person' END AS type, TEMP_OBJ.ref_c AS ref_c
                    FROM (
                        /*** BEGIN: c ***/
                        SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
                        FROM (
                            /*** BEGIN: Car.allInstances() ***/
                            SELECT 1 AS val, Car_id AS res, 'Car' AS type
                            FROM Car
                            /*** END: Car.allInstances() ***/
                        ) AS TEMP_DMN
                        /*** END: c ***/
                    ) AS TEMP_OBJ
                    LEFT JOIN Ownership
                    ON TEMP_OBJ.ref_c = Ownership.ownedCars AND TEMP_OBJ.val = 1
                    /*** END: c.owners ***/
                ) AS TEMP_DMN
                /*** END: p ***/
            ) AS TEMP_OBJ
            LEFT JOIN Person
            ON TEMP_OBJ.ref_p = Person.Person_id AND TEMP_OBJ.val = 1
            /*** END: p.name ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'Hoang' ***/
            SELECT 1 AS val, 'Hoang' AS res, 'String' AS type
            /*** END: 'Hoang' ***/
        ) AS TEMP_RIGHT
        /*** END: p.name='Hoang' ***/
    ) AS TEMP_BODY
    GROUP BY TEMP_BODY.ref_c) AS TEMP_BODY
    ON TEMP_SOURCE.ref_c = TEMP_BODY.ref_c
    WHERE TEMP_BODY.res = 1
    /*** END: c.owners->exists(p| p.name='Hoang') ***/
) AS TEMP_BODY
WHERE TEMP_BODY.res = 0
/*** END: Car.allInstances()->forAll(c| c.owners->exists(p| p.name='Hoang')) ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->forAll(c| c.owners->forAll(p| p.name='Chau'))

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->forAll(c| c.owners->forAll(p| p.name='Chau')) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: c.owners->forAll(p| p.name='Chau') ***/
    SELECT 1 AS val, 'Boolean' AS type, CASE TEMP_SOURCE.ref_p IS NULL WHEN 1 THEN 1 ELSE TEMP_BODY.res END AS res, TEMP_SOURCE.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.owners ***/
        SELECT CASE Ownership.ownedCars IS NULL WHEN 1 THEN 0 ELSE 1 END AS val, Ownership.owners AS res, CASE Ownership.ownedCars IS NULL WHEN 1 THEN 'EmptyCol' ELSE 'Person' END AS type, TEMP_OBJ.ref_c AS ref_c
        FROM (
            /*** BEGIN: c ***/
            SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
            FROM (
                /*** BEGIN: Car.allInstances() ***/
                SELECT 1 AS val, Car_id AS res, 'Car' AS type
                FROM Car
                /*** END: Car.allInstances() ***/
            ) AS TEMP_DMN
            /*** END: c ***/
        ) AS TEMP_OBJ
        LEFT JOIN Ownership
        ON TEMP_OBJ.ref_c = Ownership.ownedCars AND TEMP_OBJ.val = 1
        /*** END: c.owners ***/
    ) AS TEMP_SOURCE
    LEFT JOIN (SELECT COUNT(*) = 0 AS res, TEMP_BODY.ref_c AS ref_c
    FROM (
        /*** BEGIN: p.name='Chau' ***/
        SELECT TEMP_LEFT.res = TEMP_RIGHT.res AS res, 'Boolean' AS type, CASE TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 WHEN 1 THEN 0 ELSE 1 END AS val, TEMP_LEFT.ref_p AS ref_p, TEMP_LEFT.ref_c AS ref_c
        FROM (
            /*** BEGIN: p.name ***/
            SELECT TEMP_OBJ.val AS val, 'String' AS type, Person.name AS res, TEMP_OBJ.ref_p AS ref_p, TEMP_OBJ.ref_c AS ref_c
            FROM (
                /*** BEGIN: p ***/
                SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Person' AS type, TEMP_DMN.res AS ref_p, TEMP_DMN.ref_c AS ref_c
                FROM (
                    /*** BEGIN: c.owners ***/
                    SELECT CASE Ownership.ownedCars IS NULL WHEN 1 THEN 0 ELSE 1 END AS val, Ownership.owners AS res, CASE Ownership.ownedCars IS NULL WHEN 1 THEN 'EmptyCol' ELSE 'Person' END AS type, TEMP_OBJ.ref_c AS ref_c
                    FROM (
                        /*** BEGIN: c ***/
                        SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
                        FROM (
                            /*** BEGIN: Car.allInstances() ***/
                            SELECT 1 AS val, Car_id AS res, 'Car' AS type
                            FROM Car
                            /*** END: Car.allInstances() ***/
                        ) AS TEMP_DMN
                        /*** END: c ***/
                    ) AS TEMP_OBJ
                    LEFT JOIN Ownership
                    ON TEMP_OBJ.ref_c = Ownership.ownedCars AND TEMP_OBJ.val = 1
                    /*** END: c.owners ***/
                ) AS TEMP_DMN
                /*** END: p ***/
            ) AS TEMP_OBJ
            LEFT JOIN Person
            ON TEMP_OBJ.ref_p = Person.Person_id AND TEMP_OBJ.val = 1
            /*** END: p.name ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'Chau' ***/
            SELECT 1 AS val, 'Chau' AS res, 'String' AS type
            /*** END: 'Chau' ***/
        ) AS TEMP_RIGHT
        /*** END: p.name='Chau' ***/
    ) AS TEMP_BODY
    GROUP BY TEMP_BODY.ref_c) AS TEMP_BODY
    ON TEMP_SOURCE.ref_c = TEMP_BODY.ref_c
    WHERE IFNULL(TEMP_BODY.res, 0) = 0 AND TEMP_BODY.val = 1
    /*** END: c.owners->forAll(p| p.name='Chau') ***/
) AS TEMP_BODY
WHERE TEMP_BODY.res = 0
/*** END: Car.allInstances()->forAll(c| c.owners->forAll(p| p.name='Chau')) ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->forAll(c| false)

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->forAll(c| false) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: Car.allInstances() ***/
    SELECT 1 AS val, Car_id AS res, 'Car' AS type
    FROM Car
    /*** END: Car.allInstances() ***/
) AS TEMP_SOURCE
JOIN (
    /*** BEGIN: false ***/
    SELECT 1 AS val, false AS res, 'Boolean' AS type
    /*** END: false ***/
) AS TEMP_BODY
WHERE TEMP_BODY.res = 0
/*** END: Car.allInstances()->forAll(c| false) ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->select(c| c.color = 'blue')

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->select(c| c.color = 'blue') ***/
SELECT TEMP_BODY.val AS val, TEMP_BODY.ref_c AS res, 'Car' AS type
FROM (
    /*** BEGIN: c.color = 'blue' ***/
    SELECT TEMP_LEFT.res = TEMP_RIGHT.res AS res, 'Boolean' AS type, CASE TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 WHEN 1 THEN 0 ELSE 1 END AS val, TEMP_LEFT.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.color ***/
        SELECT TEMP_OBJ.val AS val, 'String' AS type, Car.color AS res, TEMP_OBJ.ref_c AS ref_c
        FROM (
            /*** BEGIN: c ***/
            SELECT TEMP_DMN.val AS val, TEMP_DMN.res AS res, 'Car' AS type, TEMP_DMN.res AS ref_c
            FROM (
                /*** BEGIN: Car.allInstances() ***/
                SELECT 1 AS val, Car_id AS res, 'Car' AS type
                FROM Car
                /*** END: Car.allInstances() ***/
            ) AS TEMP_DMN
            /*** END: c ***/
        ) AS TEMP_OBJ
        LEFT JOIN Car
        ON TEMP_OBJ.ref_c = Car.Car_id AND TEMP_OBJ.val = 1
        /*** END: c.color ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 'blue' ***/
        SELECT 1 AS val, 'blue' AS res, 'String' AS type
        /*** END: 'blue' ***/
    ) AS TEMP_RIGHT
    /*** END: c.color = 'blue' ***/
) AS TEMP_BODY
WHERE TEMP_BODY.res = 1
/*** END: Car.allInstances()->select(c| c.color = 'blue') ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->select(c| true)

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->select(c| true) ***/
SELECT TEMP_SOURCE.val AS val, TEMP_SOURCE.res AS res, TEMP_SOURCE.type AS type
FROM (
    /*** BEGIN: Car.allInstances() ***/
    SELECT 1 AS val, Car_id AS res, 'Car' AS type
    FROM Car
    /*** END: Car.allInstances() ***/
) AS TEMP_SOURCE
JOIN (
    /*** BEGIN: true ***/
    SELECT 1 AS val, true AS res, 'Boolean' AS type
    /*** END: true ***/
) AS TEMP_BODY
WHERE TEMP_BODY.res = 1
/*** END: Car.allInstances()->select(c| true) ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->size() = 5

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->size() = 5 ***/
SELECT TEMP_LEFT.res = TEMP_RIGHT.res AS res, 'Boolean' AS type, 1 AS val
FROM (
    /*** BEGIN: Car.allInstances()->size() ***/
    SELECT 1 AS val, 'Integer' AS type, COUNT(*) AS res
    FROM (
        /*** BEGIN: Car.allInstances() ***/
        SELECT 1 AS val, Car_id AS res, 'Car' AS type
        FROM Car
        /*** END: Car.allInstances() ***/
    ) AS TEMP_src
    /*** END: Car.allInstances()->size() ***/
) AS TEMP_LEFT
JOIN (
    /*** BEGIN: 5 ***/
    SELECT 1 AS val, 5 AS res, 'Integer' AS type
    /*** END: 5 ***/
) AS TEMP_RIGHT
/*** END: Car.allInstances()->size() = 5 ***/
;

================ ~ //END SIMPLE ~ ================



================ ~ BEGIN SIMPLE ~ ================

Car.allInstances()->size()

===========================================

================ ~ Simple ~ ================


/*** BEGIN: Car.allInstances()->size() ***/
SELECT 1 AS val, 'Integer' AS type, COUNT(*) AS res
FROM (
    /*** BEGIN: Car.allInstances() ***/
    SELECT 1 AS val, Car_id AS res, 'Car' AS type
    FROM Car
    /*** END: Car.allInstances() ***/
) AS TEMP_src
/*** END: Car.allInstances()->size() ***/
;

================ ~ //END SIMPLE ~ ================

