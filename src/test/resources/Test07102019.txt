Car::allInstances()->collect(c|c)

/*** BEGIN: Car::allInstances()->collect(c|c) ***/
SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
FROM (
    /*** BEGIN: c ***/
    SELECT 1 AS val, Car_id AS res, 'Car' AS type, Car_id AS ref_c
    FROM Car
    /*** END: c ***/
) AS TEMP_body
/*** END: Car::allInstances()->collect(c|c) ***/


Car::allInstances()->forAll(c|c.Car:owners->collect(p|p.Person:ownedCars)->flatten()->size()=1)

/*** BEGIN: Car::allInstances()->forAll(c|c.Car:owners->collect(p|p.Person:ownedCars)->flatten()->size() = 1) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: c.Car:owners->collect(p|p.Person:ownedCars)->flatten()->size() = 1 ***/
    SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:owners->collect(p|p.Person:ownedCars)->flatten()->size() ***/
        SELECT 1 AS val, CASE WHEN TEMP_src.val = 0 THEN 0 ELSE COUNT(*) END AS res, 'Integer' AS type, TEMP_src.ref_c AS ref_c
        FROM (
            /*** BEGIN: c.Car:owners->collect(p|p.Person:ownedCars)->flatten() ***/
            SELECT CASE WHEN TEMP_flat.val IS NULL THEN 0 ELSE TEMP_flat.val END AS val, CASE WHEN TEMP_flat.val IS NULL THEN NULL ELSE TEMP_flat.res END AS res, CASE WHEN TEMP_flat.val IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, TEMP_flat.ref_c AS ref_c
            FROM (
                /*** BEGIN: c.Car:owners->collect(p|p.Person:ownedCars) ***/
                SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type, TEMP_body.ref_c AS ref_c
                FROM (
                    /*** BEGIN: p.Person:ownedCars ***/
                    SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, ownedCars AS res, TEMP_obj.ref_p AS ref_p, TEMP_obj.ref_c AS ref_c
                    FROM (
                        /*** BEGIN: p ***/
                        SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c, owners AS ref_p
                        FROM Car
                        LEFT JOIN Ownership
                        ON Car_id = Ownership.ownedCars
                        /*** END: p ***/
                    ) AS TEMP_obj
                    LEFT JOIN Ownership
                    ON Ownership.owners = TEMP_obj.ref_p AND TEMP_obj.val = 1
                    /*** END: p.Person:ownedCars ***/
                ) AS TEMP_body
                /*** END: c.Car:owners->collect(p|p.Person:ownedCars) ***/
            ) AS TEMP_src
            LEFT JOIN (SELECT *
            FROM (
                /*** BEGIN: c.Car:owners->collect(p|p.Person:ownedCars) ***/
                SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type, TEMP_body.ref_c AS ref_c
                FROM (
                    /*** BEGIN: p.Person:ownedCars ***/
                    SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, ownedCars AS res, TEMP_obj.ref_p AS ref_p, TEMP_obj.ref_c AS ref_c
                    FROM (
                        /*** BEGIN: p ***/
                        SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c, owners AS ref_p
                        FROM Car
                        LEFT JOIN Ownership
                        ON Car_id = Ownership.ownedCars
                        /*** END: p ***/
                    ) AS TEMP_obj
                    LEFT JOIN Ownership
                    ON Ownership.owners = TEMP_obj.ref_p AND TEMP_obj.val = 1
                    /*** END: p.Person:ownedCars ***/
                ) AS TEMP_body
                /*** END: c.Car:owners->collect(p|p.Person:ownedCars) ***/
            ) AS TEMP
            WHERE TEMP.val = 1) AS TEMP_flat
            ON TEMP_src.ref_c = TEMP_flat.ref_c
            /*** END: c.Car:owners->collect(p|p.Person:ownedCars)->flatten() ***/
        ) AS TEMP_src
        GROUP BY TEMP_src.ref_c, TEMP_src.val
        /*** END: c.Car:owners->collect(p|p.Person:ownedCars)->flatten()->size() ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 1 ***/
        SELECT 1 AS val, 1 AS res, 'Integer' AS type
        /*** END: 1 ***/
    ) AS TEMP_RIGHT
    /*** END: c.Car:owners->collect(p|p.Person:ownedCars)->flatten()->size() = 1 ***/
) AS TEMP_body
WHERE TEMP_body.res = 0
/*** END: Car::allInstances()->forAll(c|c.Car:owners->collect(p|p.Person:ownedCars)->flatten()->size() = 1) ***/


Car::allInstances()->forAll(c|c.Car:owners->select(p|p.Person:name.oclIsUndefined())->size()=0)

/*** BEGIN: Car::allInstances()->forAll(c|c.Car:owners->select(p|p.Person:name.oclIsUndefined())->size() = 0) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: c.Car:owners->select(p|p.Person:name.oclIsUndefined())->size() = 0 ***/
    SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:owners->select(p|p.Person:name.oclIsUndefined())->size() ***/
        SELECT 1 AS val, CASE WHEN TEMP_src.val = 0 THEN 0 ELSE COUNT(*) END AS res, 'Integer' AS type, TEMP_src.ref_c AS ref_c
        FROM (
            /*** BEGIN: c.Car:owners->select(p|p.Person:name.oclIsUndefined()) ***/
            SELECT CASE WHEN TEMP_src.val = 0 OR TEMP_gbody.ref_p IS NULL THEN 0 ELSE 1 END AS val, CASE WHEN TEMP_src.val = 0 OR TEMP_gbody.ref_p IS NULL THEN NULL ELSE TEMP_src.res END AS res, CASE WHEN TEMP_src.val = 0 OR TEMP_gbody.ref_p IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, TEMP_src.ref_c AS ref_c
            FROM (
                /*** BEGIN: c.Car:owners ***/
                SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
                FROM Car
                LEFT JOIN Ownership
                ON Car_id = Ownership.ownedCars
                /*** END: c.Car:owners ***/
            ) AS TEMP_src
            JOIN (SELECT *
            FROM (
                /*** BEGIN: p.Person:name.oclIsUndefined() ***/
                SELECT TEMP_src.val AS val, CASE WHEN TEMP_src.val = 0 THEN NULL ELSE TEMP_src.res IS NULL END AS res, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, TEMP_src.ref_c AS ref_c
                FROM (
                    /*** BEGIN: p.Person:name ***/
                    SELECT TEMP_obj.val AS val, 'String' AS type, name AS res, TEMP_obj.ref_p AS ref_p, TEMP_obj.ref_c AS ref_c
                    FROM (
                        /*** BEGIN: p ***/
                        SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c, owners AS ref_p
                        FROM Car
                        LEFT JOIN Ownership
                        ON Car_id = Ownership.ownedCars
                        /*** END: p ***/
                    ) AS TEMP_obj
                    LEFT JOIN Person
                    ON Person.Person_id = TEMP_obj.ref_p AND TEMP_obj.val = 1
                    /*** END: p.Person:name ***/
                ) AS TEMP_src
                /*** END: p.Person:name.oclIsUndefined() ***/
            ) AS TEMP_body
            WHERE TEMP_body.res = 1) AS TEMP_gbody
            ON TEMP_src.res = TEMP_gbody.ref_p AND TEMP_src.ref_c = TEMP_gbody.ref_c
            /*** END: c.Car:owners->select(p|p.Person:name.oclIsUndefined()) ***/
        ) AS TEMP_src
        GROUP BY TEMP_src.ref_c, TEMP_src.val
        /*** END: c.Car:owners->select(p|p.Person:name.oclIsUndefined())->size() ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 0 ***/
        SELECT 1 AS val, 0 AS res, 'Integer' AS type
        /*** END: 0 ***/
    ) AS TEMP_RIGHT
    /*** END: c.Car:owners->select(p|p.Person:name.oclIsUndefined())->size() = 0 ***/
) AS TEMP_body
WHERE TEMP_body.res = 0
/*** END: Car::allInstances()->forAll(c|c.Car:owners->select(p|p.Person:name.oclIsUndefined())->size() = 0) ***/


Car::allInstances()->collect(c|c.Car:color)

/*** BEGIN: Car::allInstances()->collect(c|c.Car:color) ***/
SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
FROM (
    /*** BEGIN: c.Car:color ***/
    SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
    FROM Car
    /*** END: c.Car:color ***/
) AS TEMP_body
/*** END: Car::allInstances()->collect(c|c.Car:color) ***/


Car::allInstances()->collect(c|c.Car:owners)

/*** BEGIN: Car::allInstances()->collect(c|c.Car:owners) ***/
SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
FROM (
    /*** BEGIN: c.Car:owners ***/
    SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
    FROM Car
    LEFT JOIN Ownership
    ON Car_id = Ownership.ownedCars
    /*** END: c.Car:owners ***/
) AS TEMP_body
/*** END: Car::allInstances()->collect(c|c.Car:owners) ***/


Car::allInstances()->collect(c|c.Car:owners)->flatten()

/*** BEGIN: Car::allInstances()->collect(c|c.Car:owners)->flatten() ***/
SELECT 1 AS val, TEMP_src.res AS res, 'Person' AS type
FROM (
    /*** BEGIN: Car::allInstances()->collect(c|c.Car:owners) ***/
    SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
    FROM (
        /*** BEGIN: c.Car:owners ***/
        SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
        FROM Car
        LEFT JOIN Ownership
        ON Car_id = Ownership.ownedCars
        /*** END: c.Car:owners ***/
    ) AS TEMP_body
    /*** END: Car::allInstances()->collect(c|c.Car:owners) ***/
) AS TEMP_src
WHERE TEMP_src.val = 1
/*** END: Car::allInstances()->collect(c|c.Car:owners)->flatten() ***/


Car::allInstances()->forAll(c|c.Car:owners->collect(p|p)->size() = 1)

/*** BEGIN: Car::allInstances()->forAll(c|c.Car:owners->collect(p|p)->size() = 1) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: c.Car:owners->collect(p|p)->size() = 1 ***/
    SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:owners->collect(p|p)->size() ***/
        SELECT 1 AS val, CASE WHEN TEMP_src.val = 0 THEN 0 ELSE COUNT(*) END AS res, 'Integer' AS type, TEMP_src.ref_c AS ref_c
        FROM (
            /*** BEGIN: c.Car:owners->collect(p|p) ***/
            SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type, TEMP_body.ref_c AS ref_c
            FROM (
                /*** BEGIN: p ***/
                SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c, owners AS ref_p
                FROM Car
                LEFT JOIN Ownership
                ON Car_id = Ownership.ownedCars
                /*** END: p ***/
            ) AS TEMP_body
            /*** END: c.Car:owners->collect(p|p) ***/
        ) AS TEMP_src
        GROUP BY TEMP_src.ref_c, TEMP_src.val
        /*** END: c.Car:owners->collect(p|p)->size() ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 1 ***/
        SELECT 1 AS val, 1 AS res, 'Integer' AS type
        /*** END: 1 ***/
    ) AS TEMP_RIGHT
    /*** END: c.Car:owners->collect(p|p)->size() = 1 ***/
) AS TEMP_body
WHERE TEMP_body.res = 0
/*** END: Car::allInstances()->forAll(c|c.Car:owners->collect(p|p)->size() = 1) ***/


Car::allInstances()->select(c|c.Car:color = 'no-color')->size()

/*** BEGIN: Car::allInstances()->select(c|c.Car:color = 'no-color')->size() ***/
SELECT 1 AS val, COUNT(*) AS res, 'Integer' AS type
FROM (
    /*** BEGIN: Car::allInstances()->select(c|c.Car:color = 'no-color') ***/
    SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_c AS res, 'Car' AS type
    FROM (SELECT *
    FROM (
        /*** BEGIN: c.Car:color = 'no-color' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
            FROM Car
            /*** END: c.Car:color ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-color' ***/
            SELECT 1 AS val, 'no-color' AS res, 'String' AS type
            /*** END: 'no-color' ***/
        ) AS TEMP_RIGHT
        /*** END: c.Car:color = 'no-color' ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1) AS TEMP_gbody
    /*** END: Car::allInstances()->select(c|c.Car:color = 'no-color') ***/
) AS TEMP_src
/*** END: Car::allInstances()->select(c|c.Car:color = 'no-color')->size() ***/


Car::allInstances()->exists(c|c.Car:color <> 'no-color')

/*** BEGIN: Car::allInstances()->exists(c|c.Car:color <> 'no-color') ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: c.Car:color <> 'no-color' ***/
    SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res <> TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:color ***/
        SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
        FROM Car
        /*** END: c.Car:color ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 'no-color' ***/
        SELECT 1 AS val, 'no-color' AS res, 'String' AS type
        /*** END: 'no-color' ***/
    ) AS TEMP_RIGHT
    /*** END: c.Car:color <> 'no-color' ***/
) AS TEMP_body
WHERE TEMP_body.res = 1
/*** END: Car::allInstances()->exists(c|c.Car:color <> 'no-color') ***/


Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name = 'no-name'))->size()

/*** BEGIN: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name = 'no-name'))->size() ***/
SELECT 1 AS val, COUNT(*) AS res, 'Integer' AS type
FROM (
    /*** BEGIN: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name = 'no-name')) ***/
    SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_c AS res, 'Car' AS type
    FROM (SELECT *
    FROM (
        /*** BEGIN: c.Car:owners->exists(p|p.Person:name = 'no-name') ***/
        SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_c AS ref_c, CASE WHEN TEMP_gbody.ref_c IS NULL THEN 0 ELSE TEMP_gbody.res END AS res
        FROM (
            /*** BEGIN: c ***/
            SELECT 1 AS val, Car_id AS res, 'Car' AS type, Car_id AS ref_c
            FROM Car
            /*** END: c ***/
        ) AS TEMP_src
        LEFT JOIN (SELECT COUNT(*) > 0 AS res, TEMP_body.ref_c AS ref_c
        FROM (
            /*** BEGIN: p.Person:name = 'no-name' ***/
            SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_p AS ref_p, TEMP_LEFT.ref_c AS ref_c
            FROM (
                /*** BEGIN: p.Person:name ***/
                SELECT TEMP_obj.val AS val, 'String' AS type, name AS res, TEMP_obj.ref_p AS ref_p, TEMP_obj.ref_c AS ref_c
                FROM (
                    /*** BEGIN: p ***/
                    SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c, owners AS ref_p
                    FROM Car
                    LEFT JOIN Ownership
                    ON Car_id = Ownership.ownedCars
                    /*** END: p ***/
                ) AS TEMP_obj
                LEFT JOIN Person
                ON Person.Person_id = TEMP_obj.ref_p AND TEMP_obj.val = 1
                /*** END: p.Person:name ***/
            ) AS TEMP_LEFT
            JOIN (
                /*** BEGIN: 'no-name' ***/
                SELECT 1 AS val, 'no-name' AS res, 'String' AS type
                /*** END: 'no-name' ***/
            ) AS TEMP_RIGHT
            /*** END: p.Person:name = 'no-name' ***/
        ) AS TEMP_body
        WHERE TEMP_body.res = 1
        GROUP BY TEMP_body.ref_c) AS TEMP_gbody
        ON TEMP_src.ref_c = TEMP_gbody.ref_c
        /*** END: c.Car:owners->exists(p|p.Person:name = 'no-name') ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1) AS TEMP_gbody
    /*** END: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name = 'no-name')) ***/
) AS TEMP_src
/*** END: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name = 'no-name'))->size() ***/


Car::allInstances()->forAll(c|c.Car:owners->exists(p|p.Person:name = 'no-name'))

/*** BEGIN: Car::allInstances()->forAll(c|c.Car:owners->exists(p|p.Person:name = 'no-name')) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: c.Car:owners->exists(p|p.Person:name = 'no-name') ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_c AS ref_c, CASE WHEN TEMP_gbody.ref_c IS NULL THEN 0 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: c ***/
        SELECT 1 AS val, Car_id AS res, 'Car' AS type, Car_id AS ref_c
        FROM Car
        /*** END: c ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT COUNT(*) > 0 AS res, TEMP_body.ref_c AS ref_c
    FROM (
        /*** BEGIN: p.Person:name = 'no-name' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_p AS ref_p, TEMP_LEFT.ref_c AS ref_c
        FROM (
            /*** BEGIN: p.Person:name ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, name AS res, TEMP_obj.ref_p AS ref_p, TEMP_obj.ref_c AS ref_c
            FROM (
                /*** BEGIN: p ***/
                SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c, owners AS ref_p
                FROM Car
                LEFT JOIN Ownership
                ON Car_id = Ownership.ownedCars
                /*** END: p ***/
            ) AS TEMP_obj
            LEFT JOIN Person
            ON Person.Person_id = TEMP_obj.ref_p AND TEMP_obj.val = 1
            /*** END: p.Person:name ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-name' ***/
            SELECT 1 AS val, 'no-name' AS res, 'String' AS type
            /*** END: 'no-name' ***/
        ) AS TEMP_RIGHT
        /*** END: p.Person:name = 'no-name' ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1
    GROUP BY TEMP_body.ref_c) AS TEMP_gbody
    ON TEMP_src.ref_c = TEMP_gbody.ref_c
    /*** END: c.Car:owners->exists(p|p.Person:name = 'no-name') ***/
) AS TEMP_body
WHERE TEMP_body.res = 0
/*** END: Car::allInstances()->forAll(c|c.Car:owners->exists(p|p.Person:name = 'no-name')) ***/


Car::allInstances()->exists(c|c.Car:owners->forAll(p|p.Person:name = 'no-name'))

/*** BEGIN: Car::allInstances()->exists(c|c.Car:owners->forAll(p|p.Person:name = 'no-name')) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: c.Car:owners->forAll(p|p.Person:name = 'no-name') ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_c AS ref_c, CASE WHEN TEMP_gbody.ref_c IS NULL THEN 1 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: c ***/
        SELECT 1 AS val, Car_id AS res, 'Car' AS type, Car_id AS ref_c
        FROM Car
        /*** END: c ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT 1 AS val, COUNT(*) = 0 AS res, TEMP_body.ref_c AS ref_c
    FROM (
        /*** BEGIN: p.Person:name = 'no-name' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_p AS ref_p, TEMP_LEFT.ref_c AS ref_c
        FROM (
            /*** BEGIN: p.Person:name ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, name AS res, TEMP_obj.ref_p AS ref_p, TEMP_obj.ref_c AS ref_c
            FROM (
                /*** BEGIN: p ***/
                SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c, owners AS ref_p
                FROM Car
                LEFT JOIN Ownership
                ON Car_id = Ownership.ownedCars
                /*** END: p ***/
            ) AS TEMP_obj
            LEFT JOIN Person
            ON Person.Person_id = TEMP_obj.ref_p AND TEMP_obj.val = 1
            /*** END: p.Person:name ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-name' ***/
            SELECT 1 AS val, 'no-name' AS res, 'String' AS type
            /*** END: 'no-name' ***/
        ) AS TEMP_RIGHT
        /*** END: p.Person:name = 'no-name' ***/
    ) AS TEMP_body
    WHERE TEMP_body.val = 1 AND IFNULL(TEMP_body.res, 0) = 0
    GROUP BY TEMP_body.ref_c) AS TEMP_gbody
    ON TEMP_src.ref_c = TEMP_gbody.ref_c
    /*** END: c.Car:owners->forAll(p|p.Person:name = 'no-name') ***/
) AS TEMP_body
WHERE TEMP_body.res = 1
/*** END: Car::allInstances()->exists(c|c.Car:owners->forAll(p|p.Person:name = 'no-name')) ***/


Car::allInstances()

/*** BEGIN: Car::allInstances() ***/
SELECT 1 AS val, Car_id AS res, 'Car' AS type
FROM Car
/*** END: Car::allInstances() ***/


true

/*** BEGIN: true ***/
SELECT 1 AS val, TRUE AS res, 'Boolean' AS type
/*** END: true ***/


Car::allInstances()->collect(c|c.Car:color)

/*** BEGIN: Car::allInstances()->collect(c|c.Car:color) ***/
SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
FROM (
    /*** BEGIN: c.Car:color ***/
    SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
    FROM Car
    /*** END: c.Car:color ***/
) AS TEMP_body
/*** END: Car::allInstances()->collect(c|c.Car:color) ***/


Car::allInstances()->collect(c|c.Car:owners)

/*** BEGIN: Car::allInstances()->collect(c|c.Car:owners) ***/
SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
FROM (
    /*** BEGIN: c.Car:owners ***/
    SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
    FROM Car
    LEFT JOIN Ownership
    ON Car_id = Ownership.ownedCars
    /*** END: c.Car:owners ***/
) AS TEMP_body
/*** END: Car::allInstances()->collect(c|c.Car:owners) ***/


Car::allInstances()->collect(c|c.Car:owners)->flatten()

/*** BEGIN: Car::allInstances()->collect(c|c.Car:owners)->flatten() ***/
SELECT 1 AS val, TEMP_src.res AS res, 'Person' AS type
FROM (
    /*** BEGIN: Car::allInstances()->collect(c|c.Car:owners) ***/
    SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
    FROM (
        /*** BEGIN: c.Car:owners ***/
        SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
        FROM Car
        LEFT JOIN Ownership
        ON Car_id = Ownership.ownedCars
        /*** END: c.Car:owners ***/
    ) AS TEMP_body
    /*** END: Car::allInstances()->collect(c|c.Car:owners) ***/
) AS TEMP_src
WHERE TEMP_src.val = 1
/*** END: Car::allInstances()->collect(c|c.Car:owners)->flatten() ***/


Car::allInstances()->size()

/*** BEGIN: Car::allInstances()->size() ***/
SELECT 1 AS val, COUNT(*) AS res, 'Integer' AS type
FROM (
    /*** BEGIN: Car::allInstances() ***/
    SELECT 1 AS val, Car_id AS res, 'Car' AS type
    FROM Car
    /*** END: Car::allInstances() ***/
) AS TEMP_src
/*** END: Car::allInstances()->size() ***/


Car::allInstances()->collect(c|c.Car:color)->size()

/*** BEGIN: Car::allInstances()->collect(c|c.Car:color)->size() ***/
SELECT 1 AS val, COUNT(*) AS res, 'Integer' AS type
FROM (
    /*** BEGIN: Car::allInstances()->collect(c|c.Car:color) ***/
    SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
    FROM (
        /*** BEGIN: c.Car:color ***/
        SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
        FROM Car
        /*** END: c.Car:color ***/
    ) AS TEMP_body
    /*** END: Car::allInstances()->collect(c|c.Car:color) ***/
) AS TEMP_src
/*** END: Car::allInstances()->collect(c|c.Car:color)->size() ***/


Person::allInstances()->collect(p|p.Person:ownedCars->size())

/*** BEGIN: Person::allInstances()->collect(p|p.Person:ownedCars->size()) ***/
SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
FROM (
    /*** BEGIN: p.Person:ownedCars->size() ***/
    SELECT 1 AS val, CASE WHEN TEMP_src.val = 0 THEN 0 ELSE COUNT(*) END AS res, 'Integer' AS type, TEMP_src.ref_p AS ref_p
    FROM (
        /*** BEGIN: p.Person:ownedCars ***/
        SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p
        FROM Person
        LEFT JOIN Ownership
        ON Person_id = Ownership.owners
        /*** END: p.Person:ownedCars ***/
    ) AS TEMP_src
    GROUP BY TEMP_src.ref_p, TEMP_src.val
    /*** END: p.Person:ownedCars->size() ***/
) AS TEMP_body
/*** END: Person::allInstances()->collect(p|p.Person:ownedCars->size()) ***/


Car::allInstances()->collect(c|c.Car:owners)->flatten()

/*** BEGIN: Car::allInstances()->collect(c|c.Car:owners)->flatten() ***/
SELECT 1 AS val, TEMP_src.res AS res, 'Person' AS type
FROM (
    /*** BEGIN: Car::allInstances()->collect(c|c.Car:owners) ***/
    SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
    FROM (
        /*** BEGIN: c.Car:owners ***/
        SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
        FROM Car
        LEFT JOIN Ownership
        ON Car_id = Ownership.ownedCars
        /*** END: c.Car:owners ***/
    ) AS TEMP_body
    /*** END: Car::allInstances()->collect(c|c.Car:owners) ***/
) AS TEMP_src
WHERE TEMP_src.val = 1
/*** END: Car::allInstances()->collect(c|c.Car:owners)->flatten() ***/


Car::allInstances()->collect(c|c.Car:owners)->flatten()->size()

/*** BEGIN: Car::allInstances()->collect(c|c.Car:owners)->flatten()->size() ***/
SELECT 1 AS val, COUNT(*) AS res, 'Integer' AS type
FROM (
    /*** BEGIN: Car::allInstances()->collect(c|c.Car:owners)->flatten() ***/
    SELECT 1 AS val, TEMP_src.res AS res, 'Person' AS type
    FROM (
        /*** BEGIN: Car::allInstances()->collect(c|c.Car:owners) ***/
        SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
        FROM (
            /*** BEGIN: c.Car:owners ***/
            SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
            FROM Car
            LEFT JOIN Ownership
            ON Car_id = Ownership.ownedCars
            /*** END: c.Car:owners ***/
        ) AS TEMP_body
        /*** END: Car::allInstances()->collect(c|c.Car:owners) ***/
    ) AS TEMP_src
    WHERE TEMP_src.val = 1
    /*** END: Car::allInstances()->collect(c|c.Car:owners)->flatten() ***/
) AS TEMP_src
/*** END: Car::allInstances()->collect(c|c.Car:owners)->flatten()->size() ***/


Car::allInstances()->collect(c|c.Car:owners)->size()

/*** BEGIN: Car::allInstances()->collect(c|c.Car:owners)->size() ***/
SELECT 1 AS val, COUNT(*) AS res, 'Integer' AS type
FROM (
    /*** BEGIN: Car::allInstances()->collect(c|c.Car:owners) ***/
    SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
    FROM (
        /*** BEGIN: c.Car:owners ***/
        SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
        FROM Car
        LEFT JOIN Ownership
        ON Car_id = Ownership.ownedCars
        /*** END: c.Car:owners ***/
    ) AS TEMP_body
    /*** END: Car::allInstances()->collect(c|c.Car:owners) ***/
) AS TEMP_src
/*** END: Car::allInstances()->collect(c|c.Car:owners)->size() ***/


Person::allInstances()->forAll(p|p.Person:ownedCars->size() > 0)

/*** BEGIN: Person::allInstances()->forAll(p|p.Person:ownedCars->size() > 0) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: p.Person:ownedCars->size() > 0 ***/
    SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res > TEMP_RIGHT.res AS res, TEMP_LEFT.ref_p AS ref_p
    FROM (
        /*** BEGIN: p.Person:ownedCars->size() ***/
        SELECT 1 AS val, CASE WHEN TEMP_src.val = 0 THEN 0 ELSE COUNT(*) END AS res, 'Integer' AS type, TEMP_src.ref_p AS ref_p
        FROM (
            /*** BEGIN: p.Person:ownedCars ***/
            SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p
            FROM Person
            LEFT JOIN Ownership
            ON Person_id = Ownership.owners
            /*** END: p.Person:ownedCars ***/
        ) AS TEMP_src
        GROUP BY TEMP_src.ref_p, TEMP_src.val
        /*** END: p.Person:ownedCars->size() ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 0 ***/
        SELECT 1 AS val, 0 AS res, 'Integer' AS type
        /*** END: 0 ***/
    ) AS TEMP_RIGHT
    /*** END: p.Person:ownedCars->size() > 0 ***/
) AS TEMP_body
WHERE TEMP_body.res = 0
/*** END: Person::allInstances()->forAll(p|p.Person:ownedCars->size() > 0) ***/


Person::allInstances()->forAll(p|true)

/*** BEGIN: Person::allInstances()->forAll(p|true) ***/
SELECT 1 AS val, 'Boolean' AS type, CASE WHEN TEMP_src.val = 0 THEN 1 ELSE COUNT(*) = 0 END AS res
FROM (
    /*** BEGIN: Person::allInstances() ***/
    SELECT 1 AS val, Person_id AS res, 'Person' AS type
    FROM Person
    /*** END: Person::allInstances() ***/
) AS TEMP_src
JOIN (
    /*** BEGIN: true ***/
    SELECT 1 AS val, TRUE AS res, 'Boolean' AS type
    /*** END: true ***/
) AS TEMP_body
WHERE TEMP_body.res = 0
/*** END: Person::allInstances()->forAll(p|true) ***/


Person::allInstances()->exists(p|p.Person:ownedCars->size() < 10)

/*** BEGIN: Person::allInstances()->exists(p|p.Person:ownedCars->size() < 10) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: p.Person:ownedCars->size() < 10 ***/
    SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res < TEMP_RIGHT.res AS res, TEMP_LEFT.ref_p AS ref_p
    FROM (
        /*** BEGIN: p.Person:ownedCars->size() ***/
        SELECT 1 AS val, CASE WHEN TEMP_src.val = 0 THEN 0 ELSE COUNT(*) END AS res, 'Integer' AS type, TEMP_src.ref_p AS ref_p
        FROM (
            /*** BEGIN: p.Person:ownedCars ***/
            SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p
            FROM Person
            LEFT JOIN Ownership
            ON Person_id = Ownership.owners
            /*** END: p.Person:ownedCars ***/
        ) AS TEMP_src
        GROUP BY TEMP_src.ref_p, TEMP_src.val
        /*** END: p.Person:ownedCars->size() ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 10 ***/
        SELECT 1 AS val, 10 AS res, 'Integer' AS type
        /*** END: 10 ***/
    ) AS TEMP_RIGHT
    /*** END: p.Person:ownedCars->size() < 10 ***/
) AS TEMP_body
WHERE TEMP_body.res = 1
/*** END: Person::allInstances()->exists(p|p.Person:ownedCars->size() < 10) ***/


Person::allInstances()->forAll(p|p.Person:ownedCars->forAll(c|c.Car:color = 'no-color'))

/*** BEGIN: Person::allInstances()->forAll(p|p.Person:ownedCars->forAll(c|c.Car:color = 'no-color')) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: p.Person:ownedCars->forAll(c|c.Car:color = 'no-color') ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, CASE WHEN TEMP_gbody.ref_p IS NULL THEN 1 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: p ***/
        SELECT 1 AS val, Person_id AS res, 'Person' AS type, Person_id AS ref_p
        FROM Person
        /*** END: p ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT 1 AS val, COUNT(*) = 0 AS res, TEMP_body.ref_p AS ref_p
    FROM (
        /*** BEGIN: c.Car:color = 'no-color' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c, TEMP_LEFT.ref_p AS ref_p
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, color AS res, TEMP_obj.ref_c AS ref_c, TEMP_obj.ref_p AS ref_p
            FROM (
                /*** BEGIN: c ***/
                SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p, ownedCars AS ref_c
                FROM Person
                LEFT JOIN Ownership
                ON Person_id = Ownership.owners
                /*** END: c ***/
            ) AS TEMP_obj
            LEFT JOIN Car
            ON Car.Car_id = TEMP_obj.ref_c AND TEMP_obj.val = 1
            /*** END: c.Car:color ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-color' ***/
            SELECT 1 AS val, 'no-color' AS res, 'String' AS type
            /*** END: 'no-color' ***/
        ) AS TEMP_RIGHT
        /*** END: c.Car:color = 'no-color' ***/
    ) AS TEMP_body
    WHERE TEMP_body.val = 1 AND IFNULL(TEMP_body.res, 0) = 0
    GROUP BY TEMP_body.ref_p) AS TEMP_gbody
    ON TEMP_src.ref_p = TEMP_gbody.ref_p
    /*** END: p.Person:ownedCars->forAll(c|c.Car:color = 'no-color') ***/
) AS TEMP_body
WHERE TEMP_body.res = 0
/*** END: Person::allInstances()->forAll(p|p.Person:ownedCars->forAll(c|c.Car:color = 'no-color')) ***/


Person::allInstances()->forAll(p|p.Person:ownedCars->exists(c|c.Car:color = 'no-color'))

/*** BEGIN: Person::allInstances()->forAll(p|p.Person:ownedCars->exists(c|c.Car:color = 'no-color')) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: p.Person:ownedCars->exists(c|c.Car:color = 'no-color') ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, CASE WHEN TEMP_gbody.ref_p IS NULL THEN 0 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: p ***/
        SELECT 1 AS val, Person_id AS res, 'Person' AS type, Person_id AS ref_p
        FROM Person
        /*** END: p ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT COUNT(*) > 0 AS res, TEMP_body.ref_p AS ref_p
    FROM (
        /*** BEGIN: c.Car:color = 'no-color' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c, TEMP_LEFT.ref_p AS ref_p
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, color AS res, TEMP_obj.ref_c AS ref_c, TEMP_obj.ref_p AS ref_p
            FROM (
                /*** BEGIN: c ***/
                SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p, ownedCars AS ref_c
                FROM Person
                LEFT JOIN Ownership
                ON Person_id = Ownership.owners
                /*** END: c ***/
            ) AS TEMP_obj
            LEFT JOIN Car
            ON Car.Car_id = TEMP_obj.ref_c AND TEMP_obj.val = 1
            /*** END: c.Car:color ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-color' ***/
            SELECT 1 AS val, 'no-color' AS res, 'String' AS type
            /*** END: 'no-color' ***/
        ) AS TEMP_RIGHT
        /*** END: c.Car:color = 'no-color' ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1
    GROUP BY TEMP_body.ref_p) AS TEMP_gbody
    ON TEMP_src.ref_p = TEMP_gbody.ref_p
    /*** END: p.Person:ownedCars->exists(c|c.Car:color = 'no-color') ***/
) AS TEMP_body
WHERE TEMP_body.res = 0
/*** END: Person::allInstances()->forAll(p|p.Person:ownedCars->exists(c|c.Car:color = 'no-color')) ***/


Person::allInstances()->exists(p|p.Person:ownedCars->forAll(c|c.Car:color = 'no-color'))

/*** BEGIN: Person::allInstances()->exists(p|p.Person:ownedCars->forAll(c|c.Car:color = 'no-color')) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: p.Person:ownedCars->forAll(c|c.Car:color = 'no-color') ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, CASE WHEN TEMP_gbody.ref_p IS NULL THEN 1 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: p ***/
        SELECT 1 AS val, Person_id AS res, 'Person' AS type, Person_id AS ref_p
        FROM Person
        /*** END: p ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT 1 AS val, COUNT(*) = 0 AS res, TEMP_body.ref_p AS ref_p
    FROM (
        /*** BEGIN: c.Car:color = 'no-color' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c, TEMP_LEFT.ref_p AS ref_p
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, color AS res, TEMP_obj.ref_c AS ref_c, TEMP_obj.ref_p AS ref_p
            FROM (
                /*** BEGIN: c ***/
                SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p, ownedCars AS ref_c
                FROM Person
                LEFT JOIN Ownership
                ON Person_id = Ownership.owners
                /*** END: c ***/
            ) AS TEMP_obj
            LEFT JOIN Car
            ON Car.Car_id = TEMP_obj.ref_c AND TEMP_obj.val = 1
            /*** END: c.Car:color ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-color' ***/
            SELECT 1 AS val, 'no-color' AS res, 'String' AS type
            /*** END: 'no-color' ***/
        ) AS TEMP_RIGHT
        /*** END: c.Car:color = 'no-color' ***/
    ) AS TEMP_body
    WHERE TEMP_body.val = 1 AND IFNULL(TEMP_body.res, 0) = 0
    GROUP BY TEMP_body.ref_p) AS TEMP_gbody
    ON TEMP_src.ref_p = TEMP_gbody.ref_p
    /*** END: p.Person:ownedCars->forAll(c|c.Car:color = 'no-color') ***/
) AS TEMP_body
WHERE TEMP_body.res = 1
/*** END: Person::allInstances()->exists(p|p.Person:ownedCars->forAll(c|c.Car:color = 'no-color')) ***/


Person::allInstances()->exists(p|p.Person:ownedCars->exists(c|c.Car:color = 'no-color'))

/*** BEGIN: Person::allInstances()->exists(p|p.Person:ownedCars->exists(c|c.Car:color = 'no-color')) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: p.Person:ownedCars->exists(c|c.Car:color = 'no-color') ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, CASE WHEN TEMP_gbody.ref_p IS NULL THEN 0 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: p ***/
        SELECT 1 AS val, Person_id AS res, 'Person' AS type, Person_id AS ref_p
        FROM Person
        /*** END: p ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT COUNT(*) > 0 AS res, TEMP_body.ref_p AS ref_p
    FROM (
        /*** BEGIN: c.Car:color = 'no-color' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c, TEMP_LEFT.ref_p AS ref_p
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, color AS res, TEMP_obj.ref_c AS ref_c, TEMP_obj.ref_p AS ref_p
            FROM (
                /*** BEGIN: c ***/
                SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p, ownedCars AS ref_c
                FROM Person
                LEFT JOIN Ownership
                ON Person_id = Ownership.owners
                /*** END: c ***/
            ) AS TEMP_obj
            LEFT JOIN Car
            ON Car.Car_id = TEMP_obj.ref_c AND TEMP_obj.val = 1
            /*** END: c.Car:color ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-color' ***/
            SELECT 1 AS val, 'no-color' AS res, 'String' AS type
            /*** END: 'no-color' ***/
        ) AS TEMP_RIGHT
        /*** END: c.Car:color = 'no-color' ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1
    GROUP BY TEMP_body.ref_p) AS TEMP_gbody
    ON TEMP_src.ref_p = TEMP_gbody.ref_p
    /*** END: p.Person:ownedCars->exists(c|c.Car:color = 'no-color') ***/
) AS TEMP_body
WHERE TEMP_body.res = 1
/*** END: Person::allInstances()->exists(p|p.Person:ownedCars->exists(c|c.Car:color = 'no-color')) ***/


Car::allInstances()->select(c|c.Car:color = 'no-color')

/*** BEGIN: Car::allInstances()->select(c|c.Car:color = 'no-color') ***/
SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_c AS res, 'Car' AS type
FROM (SELECT *
FROM (
    /*** BEGIN: c.Car:color = 'no-color' ***/
    SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:color ***/
        SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
        FROM Car
        /*** END: c.Car:color ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 'no-color' ***/
        SELECT 1 AS val, 'no-color' AS res, 'String' AS type
        /*** END: 'no-color' ***/
    ) AS TEMP_RIGHT
    /*** END: c.Car:color = 'no-color' ***/
) AS TEMP_body
WHERE TEMP_body.res = 1) AS TEMP_gbody
/*** END: Car::allInstances()->select(c|c.Car:color = 'no-color') ***/


Person::allInstances()->select(p|p.Person:ownedCars->exists(c|c.Car:color <> 'no-color'))

/*** BEGIN: Person::allInstances()->select(p|p.Person:ownedCars->exists(c|c.Car:color <> 'no-color')) ***/
SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_p AS res, 'Person' AS type
FROM (SELECT *
FROM (
    /*** BEGIN: p.Person:ownedCars->exists(c|c.Car:color <> 'no-color') ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, CASE WHEN TEMP_gbody.ref_p IS NULL THEN 0 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: p ***/
        SELECT 1 AS val, Person_id AS res, 'Person' AS type, Person_id AS ref_p
        FROM Person
        /*** END: p ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT COUNT(*) > 0 AS res, TEMP_body.ref_p AS ref_p
    FROM (
        /*** BEGIN: c.Car:color <> 'no-color' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res <> TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c, TEMP_LEFT.ref_p AS ref_p
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, color AS res, TEMP_obj.ref_c AS ref_c, TEMP_obj.ref_p AS ref_p
            FROM (
                /*** BEGIN: c ***/
                SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p, ownedCars AS ref_c
                FROM Person
                LEFT JOIN Ownership
                ON Person_id = Ownership.owners
                /*** END: c ***/
            ) AS TEMP_obj
            LEFT JOIN Car
            ON Car.Car_id = TEMP_obj.ref_c AND TEMP_obj.val = 1
            /*** END: c.Car:color ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-color' ***/
            SELECT 1 AS val, 'no-color' AS res, 'String' AS type
            /*** END: 'no-color' ***/
        ) AS TEMP_RIGHT
        /*** END: c.Car:color <> 'no-color' ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1
    GROUP BY TEMP_body.ref_p) AS TEMP_gbody
    ON TEMP_src.ref_p = TEMP_gbody.ref_p
    /*** END: p.Person:ownedCars->exists(c|c.Car:color <> 'no-color') ***/
) AS TEMP_body
WHERE TEMP_body.res = 1) AS TEMP_gbody
/*** END: Person::allInstances()->select(p|p.Person:ownedCars->exists(c|c.Car:color <> 'no-color')) ***/


Person::allInstances()->select(p|p.Person:ownedCars->forAll(c|c.Car:color <> 'no-color'))

/*** BEGIN: Person::allInstances()->select(p|p.Person:ownedCars->forAll(c|c.Car:color <> 'no-color')) ***/
SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_p AS res, 'Person' AS type
FROM (SELECT *
FROM (
    /*** BEGIN: p.Person:ownedCars->forAll(c|c.Car:color <> 'no-color') ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, CASE WHEN TEMP_gbody.ref_p IS NULL THEN 1 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: p ***/
        SELECT 1 AS val, Person_id AS res, 'Person' AS type, Person_id AS ref_p
        FROM Person
        /*** END: p ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT 1 AS val, COUNT(*) = 0 AS res, TEMP_body.ref_p AS ref_p
    FROM (
        /*** BEGIN: c.Car:color <> 'no-color' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res <> TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c, TEMP_LEFT.ref_p AS ref_p
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, color AS res, TEMP_obj.ref_c AS ref_c, TEMP_obj.ref_p AS ref_p
            FROM (
                /*** BEGIN: c ***/
                SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p, ownedCars AS ref_c
                FROM Person
                LEFT JOIN Ownership
                ON Person_id = Ownership.owners
                /*** END: c ***/
            ) AS TEMP_obj
            LEFT JOIN Car
            ON Car.Car_id = TEMP_obj.ref_c AND TEMP_obj.val = 1
            /*** END: c.Car:color ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-color' ***/
            SELECT 1 AS val, 'no-color' AS res, 'String' AS type
            /*** END: 'no-color' ***/
        ) AS TEMP_RIGHT
        /*** END: c.Car:color <> 'no-color' ***/
    ) AS TEMP_body
    WHERE TEMP_body.val = 1 AND IFNULL(TEMP_body.res, 0) = 0
    GROUP BY TEMP_body.ref_p) AS TEMP_gbody
    ON TEMP_src.ref_p = TEMP_gbody.ref_p
    /*** END: p.Person:ownedCars->forAll(c|c.Car:color <> 'no-color') ***/
) AS TEMP_body
WHERE TEMP_body.res = 1) AS TEMP_gbody
/*** END: Person::allInstances()->select(p|p.Person:ownedCars->forAll(c|c.Car:color <> 'no-color')) ***/


Car::allInstances()->select(c|c.Car:color.oclIsUndefined())

/*** BEGIN: Car::allInstances()->select(c|c.Car:color.oclIsUndefined()) ***/
SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_c AS res, 'Car' AS type
FROM (SELECT *
FROM (
    /*** BEGIN: c.Car:color.oclIsUndefined() ***/
    SELECT TEMP_src.val AS val, CASE WHEN TEMP_src.val = 0 THEN NULL ELSE TEMP_src.res IS NULL END AS res, 'Boolean' AS type, TEMP_src.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:color ***/
        SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
        FROM Car
        /*** END: c.Car:color ***/
    ) AS TEMP_src
    /*** END: c.Car:color.oclIsUndefined() ***/
) AS TEMP_body
WHERE TEMP_body.res = 1) AS TEMP_gbody
/*** END: Car::allInstances()->select(c|c.Car:color.oclIsUndefined()) ***/


Person::allInstances()->select(p|p.Person:ownedCars->exists(c|c.Car:color.oclIsUndefined()))

/*** BEGIN: Person::allInstances()->select(p|p.Person:ownedCars->exists(c|c.Car:color.oclIsUndefined())) ***/
SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_p AS res, 'Person' AS type
FROM (SELECT *
FROM (
    /*** BEGIN: p.Person:ownedCars->exists(c|c.Car:color.oclIsUndefined()) ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, CASE WHEN TEMP_gbody.ref_p IS NULL THEN 0 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: p ***/
        SELECT 1 AS val, Person_id AS res, 'Person' AS type, Person_id AS ref_p
        FROM Person
        /*** END: p ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT COUNT(*) > 0 AS res, TEMP_body.ref_p AS ref_p
    FROM (
        /*** BEGIN: c.Car:color.oclIsUndefined() ***/
        SELECT TEMP_src.val AS val, CASE WHEN TEMP_src.val = 0 THEN NULL ELSE TEMP_src.res IS NULL END AS res, 'Boolean' AS type, TEMP_src.ref_c AS ref_c, TEMP_src.ref_p AS ref_p
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, color AS res, TEMP_obj.ref_c AS ref_c, TEMP_obj.ref_p AS ref_p
            FROM (
                /*** BEGIN: c ***/
                SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p, ownedCars AS ref_c
                FROM Person
                LEFT JOIN Ownership
                ON Person_id = Ownership.owners
                /*** END: c ***/
            ) AS TEMP_obj
            LEFT JOIN Car
            ON Car.Car_id = TEMP_obj.ref_c AND TEMP_obj.val = 1
            /*** END: c.Car:color ***/
        ) AS TEMP_src
        /*** END: c.Car:color.oclIsUndefined() ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1
    GROUP BY TEMP_body.ref_p) AS TEMP_gbody
    ON TEMP_src.ref_p = TEMP_gbody.ref_p
    /*** END: p.Person:ownedCars->exists(c|c.Car:color.oclIsUndefined()) ***/
) AS TEMP_body
WHERE TEMP_body.res = 1) AS TEMP_gbody
/*** END: Person::allInstances()->select(p|p.Person:ownedCars->exists(c|c.Car:color.oclIsUndefined())) ***/


Car::allInstances()->select(c|c.Car:color = 'no-color')->size()

/*** BEGIN: Car::allInstances()->select(c|c.Car:color = 'no-color')->size() ***/
SELECT 1 AS val, COUNT(*) AS res, 'Integer' AS type
FROM (
    /*** BEGIN: Car::allInstances()->select(c|c.Car:color = 'no-color') ***/
    SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_c AS res, 'Car' AS type
    FROM (SELECT *
    FROM (
        /*** BEGIN: c.Car:color = 'no-color' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
            FROM Car
            /*** END: c.Car:color ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-color' ***/
            SELECT 1 AS val, 'no-color' AS res, 'String' AS type
            /*** END: 'no-color' ***/
        ) AS TEMP_RIGHT
        /*** END: c.Car:color = 'no-color' ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1) AS TEMP_gbody
    /*** END: Car::allInstances()->select(c|c.Car:color = 'no-color') ***/
) AS TEMP_src
/*** END: Car::allInstances()->select(c|c.Car:color = 'no-color')->size() ***/


Car::allInstances()->exists(c|c.Car:color <> 'no-color')

/*** BEGIN: Car::allInstances()->exists(c|c.Car:color <> 'no-color') ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: c.Car:color <> 'no-color' ***/
    SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res <> TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:color ***/
        SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
        FROM Car
        /*** END: c.Car:color ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 'no-color' ***/
        SELECT 1 AS val, 'no-color' AS res, 'String' AS type
        /*** END: 'no-color' ***/
    ) AS TEMP_RIGHT
    /*** END: c.Car:color <> 'no-color' ***/
) AS TEMP_body
WHERE TEMP_body.res = 1
/*** END: Car::allInstances()->exists(c|c.Car:color <> 'no-color') ***/


Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name = 'no-name'))->size()

/*** BEGIN: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name = 'no-name'))->size() ***/
SELECT 1 AS val, COUNT(*) AS res, 'Integer' AS type
FROM (
    /*** BEGIN: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name = 'no-name')) ***/
    SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_c AS res, 'Car' AS type
    FROM (SELECT *
    FROM (
        /*** BEGIN: c.Car:owners->exists(p|p.Person:name = 'no-name') ***/
        SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_c AS ref_c, CASE WHEN TEMP_gbody.ref_c IS NULL THEN 0 ELSE TEMP_gbody.res END AS res
        FROM (
            /*** BEGIN: c ***/
            SELECT 1 AS val, Car_id AS res, 'Car' AS type, Car_id AS ref_c
            FROM Car
            /*** END: c ***/
        ) AS TEMP_src
        LEFT JOIN (SELECT COUNT(*) > 0 AS res, TEMP_body.ref_c AS ref_c
        FROM (
            /*** BEGIN: p.Person:name = 'no-name' ***/
            SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_p AS ref_p, TEMP_LEFT.ref_c AS ref_c
            FROM (
                /*** BEGIN: p.Person:name ***/
                SELECT TEMP_obj.val AS val, 'String' AS type, name AS res, TEMP_obj.ref_p AS ref_p, TEMP_obj.ref_c AS ref_c
                FROM (
                    /*** BEGIN: p ***/
                    SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c, owners AS ref_p
                    FROM Car
                    LEFT JOIN Ownership
                    ON Car_id = Ownership.ownedCars
                    /*** END: p ***/
                ) AS TEMP_obj
                LEFT JOIN Person
                ON Person.Person_id = TEMP_obj.ref_p AND TEMP_obj.val = 1
                /*** END: p.Person:name ***/
            ) AS TEMP_LEFT
            JOIN (
                /*** BEGIN: 'no-name' ***/
                SELECT 1 AS val, 'no-name' AS res, 'String' AS type
                /*** END: 'no-name' ***/
            ) AS TEMP_RIGHT
            /*** END: p.Person:name = 'no-name' ***/
        ) AS TEMP_body
        WHERE TEMP_body.res = 1
        GROUP BY TEMP_body.ref_c) AS TEMP_gbody
        ON TEMP_src.ref_c = TEMP_gbody.ref_c
        /*** END: c.Car:owners->exists(p|p.Person:name = 'no-name') ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1) AS TEMP_gbody
    /*** END: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name = 'no-name')) ***/
) AS TEMP_src
/*** END: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name = 'no-name'))->size() ***/


Car::allInstances()->exists(c|c.Car:owners->forAll(p|p.Person:name = 'no-name'))

/*** BEGIN: Car::allInstances()->exists(c|c.Car:owners->forAll(p|p.Person:name = 'no-name')) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: c.Car:owners->forAll(p|p.Person:name = 'no-name') ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_c AS ref_c, CASE WHEN TEMP_gbody.ref_c IS NULL THEN 1 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: c ***/
        SELECT 1 AS val, Car_id AS res, 'Car' AS type, Car_id AS ref_c
        FROM Car
        /*** END: c ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT 1 AS val, COUNT(*) = 0 AS res, TEMP_body.ref_c AS ref_c
    FROM (
        /*** BEGIN: p.Person:name = 'no-name' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_p AS ref_p, TEMP_LEFT.ref_c AS ref_c
        FROM (
            /*** BEGIN: p.Person:name ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, name AS res, TEMP_obj.ref_p AS ref_p, TEMP_obj.ref_c AS ref_c
            FROM (
                /*** BEGIN: p ***/
                SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c, owners AS ref_p
                FROM Car
                LEFT JOIN Ownership
                ON Car_id = Ownership.ownedCars
                /*** END: p ***/
            ) AS TEMP_obj
            LEFT JOIN Person
            ON Person.Person_id = TEMP_obj.ref_p AND TEMP_obj.val = 1
            /*** END: p.Person:name ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-name' ***/
            SELECT 1 AS val, 'no-name' AS res, 'String' AS type
            /*** END: 'no-name' ***/
        ) AS TEMP_RIGHT
        /*** END: p.Person:name = 'no-name' ***/
    ) AS TEMP_body
    WHERE TEMP_body.val = 1 AND IFNULL(TEMP_body.res, 0) = 0
    GROUP BY TEMP_body.ref_c) AS TEMP_gbody
    ON TEMP_src.ref_c = TEMP_gbody.ref_c
    /*** END: c.Car:owners->forAll(p|p.Person:name = 'no-name') ***/
) AS TEMP_body
WHERE TEMP_body.res = 1
/*** END: Car::allInstances()->exists(c|c.Car:owners->forAll(p|p.Person:name = 'no-name')) ***/


Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name.oclIsUndefined()))->size()

/*** BEGIN: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name.oclIsUndefined()))->size() ***/
SELECT 1 AS val, COUNT(*) AS res, 'Integer' AS type
FROM (
    /*** BEGIN: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name.oclIsUndefined())) ***/
    SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_c AS res, 'Car' AS type
    FROM (SELECT *
    FROM (
        /*** BEGIN: c.Car:owners->exists(p|p.Person:name.oclIsUndefined()) ***/
        SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_c AS ref_c, CASE WHEN TEMP_gbody.ref_c IS NULL THEN 0 ELSE TEMP_gbody.res END AS res
        FROM (
            /*** BEGIN: c ***/
            SELECT 1 AS val, Car_id AS res, 'Car' AS type, Car_id AS ref_c
            FROM Car
            /*** END: c ***/
        ) AS TEMP_src
        LEFT JOIN (SELECT COUNT(*) > 0 AS res, TEMP_body.ref_c AS ref_c
        FROM (
            /*** BEGIN: p.Person:name.oclIsUndefined() ***/
            SELECT TEMP_src.val AS val, CASE WHEN TEMP_src.val = 0 THEN NULL ELSE TEMP_src.res IS NULL END AS res, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, TEMP_src.ref_c AS ref_c
            FROM (
                /*** BEGIN: p.Person:name ***/
                SELECT TEMP_obj.val AS val, 'String' AS type, name AS res, TEMP_obj.ref_p AS ref_p, TEMP_obj.ref_c AS ref_c
                FROM (
                    /*** BEGIN: p ***/
                    SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c, owners AS ref_p
                    FROM Car
                    LEFT JOIN Ownership
                    ON Car_id = Ownership.ownedCars
                    /*** END: p ***/
                ) AS TEMP_obj
                LEFT JOIN Person
                ON Person.Person_id = TEMP_obj.ref_p AND TEMP_obj.val = 1
                /*** END: p.Person:name ***/
            ) AS TEMP_src
            /*** END: p.Person:name.oclIsUndefined() ***/
        ) AS TEMP_body
        WHERE TEMP_body.res = 1
        GROUP BY TEMP_body.ref_c) AS TEMP_gbody
        ON TEMP_src.ref_c = TEMP_gbody.ref_c
        /*** END: c.Car:owners->exists(p|p.Person:name.oclIsUndefined()) ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1) AS TEMP_gbody
    /*** END: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name.oclIsUndefined())) ***/
) AS TEMP_src
/*** END: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name.oclIsUndefined()))->size() ***/


Car::allInstances()

/*** BEGIN: Car::allInstances() ***/
SELECT 1 AS val, Car_id AS res, 'Car' AS type
FROM Car
/*** END: Car::allInstances() ***/


true

/*** BEGIN: true ***/
SELECT 1 AS val, TRUE AS res, 'Boolean' AS type
/*** END: true ***/


Car::allInstances()->collect(c|c.Car:color)

/*** BEGIN: Car::allInstances()->collect(c|c.Car:color) ***/
SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
FROM (
    /*** BEGIN: c.Car:color ***/
    SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
    FROM Car
    /*** END: c.Car:color ***/
) AS TEMP_body
/*** END: Car::allInstances()->collect(c|c.Car:color) ***/


Car::allInstances()->collect(c|c.Car:owners)

/*** BEGIN: Car::allInstances()->collect(c|c.Car:owners) ***/
SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
FROM (
    /*** BEGIN: c.Car:owners ***/
    SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
    FROM Car
    LEFT JOIN Ownership
    ON Car_id = Ownership.ownedCars
    /*** END: c.Car:owners ***/
) AS TEMP_body
/*** END: Car::allInstances()->collect(c|c.Car:owners) ***/


Car::allInstances()->collect(c|c.Car:owners)->flatten()

/*** BEGIN: Car::allInstances()->collect(c|c.Car:owners)->flatten() ***/
SELECT 1 AS val, TEMP_src.res AS res, 'Person' AS type
FROM (
    /*** BEGIN: Car::allInstances()->collect(c|c.Car:owners) ***/
    SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
    FROM (
        /*** BEGIN: c.Car:owners ***/
        SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
        FROM Car
        LEFT JOIN Ownership
        ON Car_id = Ownership.ownedCars
        /*** END: c.Car:owners ***/
    ) AS TEMP_body
    /*** END: Car::allInstances()->collect(c|c.Car:owners) ***/
) AS TEMP_src
WHERE TEMP_src.val = 1
/*** END: Car::allInstances()->collect(c|c.Car:owners)->flatten() ***/


Car::allInstances()->size()

/*** BEGIN: Car::allInstances()->size() ***/
SELECT 1 AS val, COUNT(*) AS res, 'Integer' AS type
FROM (
    /*** BEGIN: Car::allInstances() ***/
    SELECT 1 AS val, Car_id AS res, 'Car' AS type
    FROM Car
    /*** END: Car::allInstances() ***/
) AS TEMP_src
/*** END: Car::allInstances()->size() ***/


Car::allInstances()->collect(c|c.Car:color)->size()

/*** BEGIN: Car::allInstances()->collect(c|c.Car:color)->size() ***/
SELECT 1 AS val, COUNT(*) AS res, 'Integer' AS type
FROM (
    /*** BEGIN: Car::allInstances()->collect(c|c.Car:color) ***/
    SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
    FROM (
        /*** BEGIN: c.Car:color ***/
        SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
        FROM Car
        /*** END: c.Car:color ***/
    ) AS TEMP_body
    /*** END: Car::allInstances()->collect(c|c.Car:color) ***/
) AS TEMP_src
/*** END: Car::allInstances()->collect(c|c.Car:color)->size() ***/


Person::allInstances()->collect(p|p.Person:ownedCars->size())

/*** BEGIN: Person::allInstances()->collect(p|p.Person:ownedCars->size()) ***/
SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
FROM (
    /*** BEGIN: p.Person:ownedCars->size() ***/
    SELECT 1 AS val, CASE WHEN TEMP_src.val = 0 THEN 0 ELSE COUNT(*) END AS res, 'Integer' AS type, TEMP_src.ref_p AS ref_p
    FROM (
        /*** BEGIN: p.Person:ownedCars ***/
        SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p
        FROM Person
        LEFT JOIN Ownership
        ON Person_id = Ownership.owners
        /*** END: p.Person:ownedCars ***/
    ) AS TEMP_src
    GROUP BY TEMP_src.ref_p, TEMP_src.val
    /*** END: p.Person:ownedCars->size() ***/
) AS TEMP_body
/*** END: Person::allInstances()->collect(p|p.Person:ownedCars->size()) ***/


Car::allInstances()->collect(c|c.Car:owners)->flatten()

/*** BEGIN: Car::allInstances()->collect(c|c.Car:owners)->flatten() ***/
SELECT 1 AS val, TEMP_src.res AS res, 'Person' AS type
FROM (
    /*** BEGIN: Car::allInstances()->collect(c|c.Car:owners) ***/
    SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
    FROM (
        /*** BEGIN: c.Car:owners ***/
        SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
        FROM Car
        LEFT JOIN Ownership
        ON Car_id = Ownership.ownedCars
        /*** END: c.Car:owners ***/
    ) AS TEMP_body
    /*** END: Car::allInstances()->collect(c|c.Car:owners) ***/
) AS TEMP_src
WHERE TEMP_src.val = 1
/*** END: Car::allInstances()->collect(c|c.Car:owners)->flatten() ***/


Car::allInstances()->collect(c|c.Car:owners)->flatten()->size()

/*** BEGIN: Car::allInstances()->collect(c|c.Car:owners)->flatten()->size() ***/
SELECT 1 AS val, COUNT(*) AS res, 'Integer' AS type
FROM (
    /*** BEGIN: Car::allInstances()->collect(c|c.Car:owners)->flatten() ***/
    SELECT 1 AS val, TEMP_src.res AS res, 'Person' AS type
    FROM (
        /*** BEGIN: Car::allInstances()->collect(c|c.Car:owners) ***/
        SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
        FROM (
            /*** BEGIN: c.Car:owners ***/
            SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
            FROM Car
            LEFT JOIN Ownership
            ON Car_id = Ownership.ownedCars
            /*** END: c.Car:owners ***/
        ) AS TEMP_body
        /*** END: Car::allInstances()->collect(c|c.Car:owners) ***/
    ) AS TEMP_src
    WHERE TEMP_src.val = 1
    /*** END: Car::allInstances()->collect(c|c.Car:owners)->flatten() ***/
) AS TEMP_src
/*** END: Car::allInstances()->collect(c|c.Car:owners)->flatten()->size() ***/


Car::allInstances()->collect(c|c.Car:owners)->size()

/*** BEGIN: Car::allInstances()->collect(c|c.Car:owners)->size() ***/
SELECT 1 AS val, COUNT(*) AS res, 'Integer' AS type
FROM (
    /*** BEGIN: Car::allInstances()->collect(c|c.Car:owners) ***/
    SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
    FROM (
        /*** BEGIN: c.Car:owners ***/
        SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
        FROM Car
        LEFT JOIN Ownership
        ON Car_id = Ownership.ownedCars
        /*** END: c.Car:owners ***/
    ) AS TEMP_body
    /*** END: Car::allInstances()->collect(c|c.Car:owners) ***/
) AS TEMP_src
/*** END: Car::allInstances()->collect(c|c.Car:owners)->size() ***/


Person::allInstances()->forAll(p|p.Person:ownedCars->size() > 0)

/*** BEGIN: Person::allInstances()->forAll(p|p.Person:ownedCars->size() > 0) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: p.Person:ownedCars->size() > 0 ***/
    SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res > TEMP_RIGHT.res AS res, TEMP_LEFT.ref_p AS ref_p
    FROM (
        /*** BEGIN: p.Person:ownedCars->size() ***/
        SELECT 1 AS val, CASE WHEN TEMP_src.val = 0 THEN 0 ELSE COUNT(*) END AS res, 'Integer' AS type, TEMP_src.ref_p AS ref_p
        FROM (
            /*** BEGIN: p.Person:ownedCars ***/
            SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p
            FROM Person
            LEFT JOIN Ownership
            ON Person_id = Ownership.owners
            /*** END: p.Person:ownedCars ***/
        ) AS TEMP_src
        GROUP BY TEMP_src.ref_p, TEMP_src.val
        /*** END: p.Person:ownedCars->size() ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 0 ***/
        SELECT 1 AS val, 0 AS res, 'Integer' AS type
        /*** END: 0 ***/
    ) AS TEMP_RIGHT
    /*** END: p.Person:ownedCars->size() > 0 ***/
) AS TEMP_body
WHERE TEMP_body.res = 0
/*** END: Person::allInstances()->forAll(p|p.Person:ownedCars->size() > 0) ***/


Person::allInstances()->exists(p|p.Person:ownedCars->size() = 10)

/*** BEGIN: Person::allInstances()->exists(p|p.Person:ownedCars->size() = 10) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: p.Person:ownedCars->size() = 10 ***/
    SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_p AS ref_p
    FROM (
        /*** BEGIN: p.Person:ownedCars->size() ***/
        SELECT 1 AS val, CASE WHEN TEMP_src.val = 0 THEN 0 ELSE COUNT(*) END AS res, 'Integer' AS type, TEMP_src.ref_p AS ref_p
        FROM (
            /*** BEGIN: p.Person:ownedCars ***/
            SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p
            FROM Person
            LEFT JOIN Ownership
            ON Person_id = Ownership.owners
            /*** END: p.Person:ownedCars ***/
        ) AS TEMP_src
        GROUP BY TEMP_src.ref_p, TEMP_src.val
        /*** END: p.Person:ownedCars->size() ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 10 ***/
        SELECT 1 AS val, 10 AS res, 'Integer' AS type
        /*** END: 10 ***/
    ) AS TEMP_RIGHT
    /*** END: p.Person:ownedCars->size() = 10 ***/
) AS TEMP_body
WHERE TEMP_body.res = 1
/*** END: Person::allInstances()->exists(p|p.Person:ownedCars->size() = 10) ***/


Person::allInstances()->exists(p|p.Person:ownedCars->size() < 10)

/*** BEGIN: Person::allInstances()->exists(p|p.Person:ownedCars->size() < 10) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: p.Person:ownedCars->size() < 10 ***/
    SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res < TEMP_RIGHT.res AS res, TEMP_LEFT.ref_p AS ref_p
    FROM (
        /*** BEGIN: p.Person:ownedCars->size() ***/
        SELECT 1 AS val, CASE WHEN TEMP_src.val = 0 THEN 0 ELSE COUNT(*) END AS res, 'Integer' AS type, TEMP_src.ref_p AS ref_p
        FROM (
            /*** BEGIN: p.Person:ownedCars ***/
            SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p
            FROM Person
            LEFT JOIN Ownership
            ON Person_id = Ownership.owners
            /*** END: p.Person:ownedCars ***/
        ) AS TEMP_src
        GROUP BY TEMP_src.ref_p, TEMP_src.val
        /*** END: p.Person:ownedCars->size() ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 10 ***/
        SELECT 1 AS val, 10 AS res, 'Integer' AS type
        /*** END: 10 ***/
    ) AS TEMP_RIGHT
    /*** END: p.Person:ownedCars->size() < 10 ***/
) AS TEMP_body
WHERE TEMP_body.res = 1
/*** END: Person::allInstances()->exists(p|p.Person:ownedCars->size() < 10) ***/


Person::allInstances()->forAll(p|p.Person:ownedCars->forAll(c|c.Car:color = 'no-color'))

/*** BEGIN: Person::allInstances()->forAll(p|p.Person:ownedCars->forAll(c|c.Car:color = 'no-color')) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: p.Person:ownedCars->forAll(c|c.Car:color = 'no-color') ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, CASE WHEN TEMP_gbody.ref_p IS NULL THEN 1 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: p ***/
        SELECT 1 AS val, Person_id AS res, 'Person' AS type, Person_id AS ref_p
        FROM Person
        /*** END: p ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT 1 AS val, COUNT(*) = 0 AS res, TEMP_body.ref_p AS ref_p
    FROM (
        /*** BEGIN: c.Car:color = 'no-color' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c, TEMP_LEFT.ref_p AS ref_p
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, color AS res, TEMP_obj.ref_c AS ref_c, TEMP_obj.ref_p AS ref_p
            FROM (
                /*** BEGIN: c ***/
                SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p, ownedCars AS ref_c
                FROM Person
                LEFT JOIN Ownership
                ON Person_id = Ownership.owners
                /*** END: c ***/
            ) AS TEMP_obj
            LEFT JOIN Car
            ON Car.Car_id = TEMP_obj.ref_c AND TEMP_obj.val = 1
            /*** END: c.Car:color ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-color' ***/
            SELECT 1 AS val, 'no-color' AS res, 'String' AS type
            /*** END: 'no-color' ***/
        ) AS TEMP_RIGHT
        /*** END: c.Car:color = 'no-color' ***/
    ) AS TEMP_body
    WHERE TEMP_body.val = 1 AND IFNULL(TEMP_body.res, 0) = 0
    GROUP BY TEMP_body.ref_p) AS TEMP_gbody
    ON TEMP_src.ref_p = TEMP_gbody.ref_p
    /*** END: p.Person:ownedCars->forAll(c|c.Car:color = 'no-color') ***/
) AS TEMP_body
WHERE TEMP_body.res = 0
/*** END: Person::allInstances()->forAll(p|p.Person:ownedCars->forAll(c|c.Car:color = 'no-color')) ***/


Person::allInstances()->forAll(p|p.Person:ownedCars->exists(c|c.Car:color = 'no-color'))

/*** BEGIN: Person::allInstances()->forAll(p|p.Person:ownedCars->exists(c|c.Car:color = 'no-color')) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: p.Person:ownedCars->exists(c|c.Car:color = 'no-color') ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, CASE WHEN TEMP_gbody.ref_p IS NULL THEN 0 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: p ***/
        SELECT 1 AS val, Person_id AS res, 'Person' AS type, Person_id AS ref_p
        FROM Person
        /*** END: p ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT COUNT(*) > 0 AS res, TEMP_body.ref_p AS ref_p
    FROM (
        /*** BEGIN: c.Car:color = 'no-color' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c, TEMP_LEFT.ref_p AS ref_p
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, color AS res, TEMP_obj.ref_c AS ref_c, TEMP_obj.ref_p AS ref_p
            FROM (
                /*** BEGIN: c ***/
                SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p, ownedCars AS ref_c
                FROM Person
                LEFT JOIN Ownership
                ON Person_id = Ownership.owners
                /*** END: c ***/
            ) AS TEMP_obj
            LEFT JOIN Car
            ON Car.Car_id = TEMP_obj.ref_c AND TEMP_obj.val = 1
            /*** END: c.Car:color ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-color' ***/
            SELECT 1 AS val, 'no-color' AS res, 'String' AS type
            /*** END: 'no-color' ***/
        ) AS TEMP_RIGHT
        /*** END: c.Car:color = 'no-color' ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1
    GROUP BY TEMP_body.ref_p) AS TEMP_gbody
    ON TEMP_src.ref_p = TEMP_gbody.ref_p
    /*** END: p.Person:ownedCars->exists(c|c.Car:color = 'no-color') ***/
) AS TEMP_body
WHERE TEMP_body.res = 0
/*** END: Person::allInstances()->forAll(p|p.Person:ownedCars->exists(c|c.Car:color = 'no-color')) ***/


Person::allInstances()->exists(p|p.Person:ownedCars->forAll(c|c.Car:color = 'no-color'))

/*** BEGIN: Person::allInstances()->exists(p|p.Person:ownedCars->forAll(c|c.Car:color = 'no-color')) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: p.Person:ownedCars->forAll(c|c.Car:color = 'no-color') ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, CASE WHEN TEMP_gbody.ref_p IS NULL THEN 1 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: p ***/
        SELECT 1 AS val, Person_id AS res, 'Person' AS type, Person_id AS ref_p
        FROM Person
        /*** END: p ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT 1 AS val, COUNT(*) = 0 AS res, TEMP_body.ref_p AS ref_p
    FROM (
        /*** BEGIN: c.Car:color = 'no-color' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c, TEMP_LEFT.ref_p AS ref_p
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, color AS res, TEMP_obj.ref_c AS ref_c, TEMP_obj.ref_p AS ref_p
            FROM (
                /*** BEGIN: c ***/
                SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p, ownedCars AS ref_c
                FROM Person
                LEFT JOIN Ownership
                ON Person_id = Ownership.owners
                /*** END: c ***/
            ) AS TEMP_obj
            LEFT JOIN Car
            ON Car.Car_id = TEMP_obj.ref_c AND TEMP_obj.val = 1
            /*** END: c.Car:color ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-color' ***/
            SELECT 1 AS val, 'no-color' AS res, 'String' AS type
            /*** END: 'no-color' ***/
        ) AS TEMP_RIGHT
        /*** END: c.Car:color = 'no-color' ***/
    ) AS TEMP_body
    WHERE TEMP_body.val = 1 AND IFNULL(TEMP_body.res, 0) = 0
    GROUP BY TEMP_body.ref_p) AS TEMP_gbody
    ON TEMP_src.ref_p = TEMP_gbody.ref_p
    /*** END: p.Person:ownedCars->forAll(c|c.Car:color = 'no-color') ***/
) AS TEMP_body
WHERE TEMP_body.res = 1
/*** END: Person::allInstances()->exists(p|p.Person:ownedCars->forAll(c|c.Car:color = 'no-color')) ***/


Person::allInstances()->exists(p|p.Person:ownedCars->exists(c|c.Car:color = 'no-color'))

/*** BEGIN: Person::allInstances()->exists(p|p.Person:ownedCars->exists(c|c.Car:color = 'no-color')) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: p.Person:ownedCars->exists(c|c.Car:color = 'no-color') ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, CASE WHEN TEMP_gbody.ref_p IS NULL THEN 0 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: p ***/
        SELECT 1 AS val, Person_id AS res, 'Person' AS type, Person_id AS ref_p
        FROM Person
        /*** END: p ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT COUNT(*) > 0 AS res, TEMP_body.ref_p AS ref_p
    FROM (
        /*** BEGIN: c.Car:color = 'no-color' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c, TEMP_LEFT.ref_p AS ref_p
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, color AS res, TEMP_obj.ref_c AS ref_c, TEMP_obj.ref_p AS ref_p
            FROM (
                /*** BEGIN: c ***/
                SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p, ownedCars AS ref_c
                FROM Person
                LEFT JOIN Ownership
                ON Person_id = Ownership.owners
                /*** END: c ***/
            ) AS TEMP_obj
            LEFT JOIN Car
            ON Car.Car_id = TEMP_obj.ref_c AND TEMP_obj.val = 1
            /*** END: c.Car:color ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-color' ***/
            SELECT 1 AS val, 'no-color' AS res, 'String' AS type
            /*** END: 'no-color' ***/
        ) AS TEMP_RIGHT
        /*** END: c.Car:color = 'no-color' ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1
    GROUP BY TEMP_body.ref_p) AS TEMP_gbody
    ON TEMP_src.ref_p = TEMP_gbody.ref_p
    /*** END: p.Person:ownedCars->exists(c|c.Car:color = 'no-color') ***/
) AS TEMP_body
WHERE TEMP_body.res = 1
/*** END: Person::allInstances()->exists(p|p.Person:ownedCars->exists(c|c.Car:color = 'no-color')) ***/


Car::allInstances()->select(c|c.Car:color = 'no-color')

/*** BEGIN: Car::allInstances()->select(c|c.Car:color = 'no-color') ***/
SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_c AS res, 'Car' AS type
FROM (SELECT *
FROM (
    /*** BEGIN: c.Car:color = 'no-color' ***/
    SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:color ***/
        SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
        FROM Car
        /*** END: c.Car:color ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 'no-color' ***/
        SELECT 1 AS val, 'no-color' AS res, 'String' AS type
        /*** END: 'no-color' ***/
    ) AS TEMP_RIGHT
    /*** END: c.Car:color = 'no-color' ***/
) AS TEMP_body
WHERE TEMP_body.res = 1) AS TEMP_gbody
/*** END: Car::allInstances()->select(c|c.Car:color = 'no-color') ***/


Person::allInstances()->select(p|p.Person:ownedCars->exists(c|c.Car:color <> 'no-color'))

/*** BEGIN: Person::allInstances()->select(p|p.Person:ownedCars->exists(c|c.Car:color <> 'no-color')) ***/
SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_p AS res, 'Person' AS type
FROM (SELECT *
FROM (
    /*** BEGIN: p.Person:ownedCars->exists(c|c.Car:color <> 'no-color') ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, CASE WHEN TEMP_gbody.ref_p IS NULL THEN 0 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: p ***/
        SELECT 1 AS val, Person_id AS res, 'Person' AS type, Person_id AS ref_p
        FROM Person
        /*** END: p ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT COUNT(*) > 0 AS res, TEMP_body.ref_p AS ref_p
    FROM (
        /*** BEGIN: c.Car:color <> 'no-color' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res <> TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c, TEMP_LEFT.ref_p AS ref_p
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, color AS res, TEMP_obj.ref_c AS ref_c, TEMP_obj.ref_p AS ref_p
            FROM (
                /*** BEGIN: c ***/
                SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p, ownedCars AS ref_c
                FROM Person
                LEFT JOIN Ownership
                ON Person_id = Ownership.owners
                /*** END: c ***/
            ) AS TEMP_obj
            LEFT JOIN Car
            ON Car.Car_id = TEMP_obj.ref_c AND TEMP_obj.val = 1
            /*** END: c.Car:color ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-color' ***/
            SELECT 1 AS val, 'no-color' AS res, 'String' AS type
            /*** END: 'no-color' ***/
        ) AS TEMP_RIGHT
        /*** END: c.Car:color <> 'no-color' ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1
    GROUP BY TEMP_body.ref_p) AS TEMP_gbody
    ON TEMP_src.ref_p = TEMP_gbody.ref_p
    /*** END: p.Person:ownedCars->exists(c|c.Car:color <> 'no-color') ***/
) AS TEMP_body
WHERE TEMP_body.res = 1) AS TEMP_gbody
/*** END: Person::allInstances()->select(p|p.Person:ownedCars->exists(c|c.Car:color <> 'no-color')) ***/


Person::allInstances()->select(p|p.Person:ownedCars->forAll(c|c.Car:color <> 'no-color'))

/*** BEGIN: Person::allInstances()->select(p|p.Person:ownedCars->forAll(c|c.Car:color <> 'no-color')) ***/
SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_p AS res, 'Person' AS type
FROM (SELECT *
FROM (
    /*** BEGIN: p.Person:ownedCars->forAll(c|c.Car:color <> 'no-color') ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, CASE WHEN TEMP_gbody.ref_p IS NULL THEN 1 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: p ***/
        SELECT 1 AS val, Person_id AS res, 'Person' AS type, Person_id AS ref_p
        FROM Person
        /*** END: p ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT 1 AS val, COUNT(*) = 0 AS res, TEMP_body.ref_p AS ref_p
    FROM (
        /*** BEGIN: c.Car:color <> 'no-color' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res <> TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c, TEMP_LEFT.ref_p AS ref_p
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, color AS res, TEMP_obj.ref_c AS ref_c, TEMP_obj.ref_p AS ref_p
            FROM (
                /*** BEGIN: c ***/
                SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p, ownedCars AS ref_c
                FROM Person
                LEFT JOIN Ownership
                ON Person_id = Ownership.owners
                /*** END: c ***/
            ) AS TEMP_obj
            LEFT JOIN Car
            ON Car.Car_id = TEMP_obj.ref_c AND TEMP_obj.val = 1
            /*** END: c.Car:color ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-color' ***/
            SELECT 1 AS val, 'no-color' AS res, 'String' AS type
            /*** END: 'no-color' ***/
        ) AS TEMP_RIGHT
        /*** END: c.Car:color <> 'no-color' ***/
    ) AS TEMP_body
    WHERE TEMP_body.val = 1 AND IFNULL(TEMP_body.res, 0) = 0
    GROUP BY TEMP_body.ref_p) AS TEMP_gbody
    ON TEMP_src.ref_p = TEMP_gbody.ref_p
    /*** END: p.Person:ownedCars->forAll(c|c.Car:color <> 'no-color') ***/
) AS TEMP_body
WHERE TEMP_body.res = 1) AS TEMP_gbody
/*** END: Person::allInstances()->select(p|p.Person:ownedCars->forAll(c|c.Car:color <> 'no-color')) ***/


Car::allInstances()->select(c|c.Car:color.oclIsUndefined())

/*** BEGIN: Car::allInstances()->select(c|c.Car:color.oclIsUndefined()) ***/
SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_c AS res, 'Car' AS type
FROM (SELECT *
FROM (
    /*** BEGIN: c.Car:color.oclIsUndefined() ***/
    SELECT TEMP_src.val AS val, CASE WHEN TEMP_src.val = 0 THEN NULL ELSE TEMP_src.res IS NULL END AS res, 'Boolean' AS type, TEMP_src.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:color ***/
        SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
        FROM Car
        /*** END: c.Car:color ***/
    ) AS TEMP_src
    /*** END: c.Car:color.oclIsUndefined() ***/
) AS TEMP_body
WHERE TEMP_body.res = 1) AS TEMP_gbody
/*** END: Car::allInstances()->select(c|c.Car:color.oclIsUndefined()) ***/


Person::allInstances()->select(p|p.Person:ownedCars->exists(c|c.Car:color.oclIsUndefined()))

/*** BEGIN: Person::allInstances()->select(p|p.Person:ownedCars->exists(c|c.Car:color.oclIsUndefined())) ***/
SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_p AS res, 'Person' AS type
FROM (SELECT *
FROM (
    /*** BEGIN: p.Person:ownedCars->exists(c|c.Car:color.oclIsUndefined()) ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, CASE WHEN TEMP_gbody.ref_p IS NULL THEN 0 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: p ***/
        SELECT 1 AS val, Person_id AS res, 'Person' AS type, Person_id AS ref_p
        FROM Person
        /*** END: p ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT COUNT(*) > 0 AS res, TEMP_body.ref_p AS ref_p
    FROM (
        /*** BEGIN: c.Car:color.oclIsUndefined() ***/
        SELECT TEMP_src.val AS val, CASE WHEN TEMP_src.val = 0 THEN NULL ELSE TEMP_src.res IS NULL END AS res, 'Boolean' AS type, TEMP_src.ref_c AS ref_c, TEMP_src.ref_p AS ref_p
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, color AS res, TEMP_obj.ref_c AS ref_c, TEMP_obj.ref_p AS ref_p
            FROM (
                /*** BEGIN: c ***/
                SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, ownedCars AS res, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, Person_id AS ref_p, ownedCars AS ref_c
                FROM Person
                LEFT JOIN Ownership
                ON Person_id = Ownership.owners
                /*** END: c ***/
            ) AS TEMP_obj
            LEFT JOIN Car
            ON Car.Car_id = TEMP_obj.ref_c AND TEMP_obj.val = 1
            /*** END: c.Car:color ***/
        ) AS TEMP_src
        /*** END: c.Car:color.oclIsUndefined() ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1
    GROUP BY TEMP_body.ref_p) AS TEMP_gbody
    ON TEMP_src.ref_p = TEMP_gbody.ref_p
    /*** END: p.Person:ownedCars->exists(c|c.Car:color.oclIsUndefined()) ***/
) AS TEMP_body
WHERE TEMP_body.res = 1) AS TEMP_gbody
/*** END: Person::allInstances()->select(p|p.Person:ownedCars->exists(c|c.Car:color.oclIsUndefined())) ***/


Car::allInstances()->select(c|c.Car:color = 'no-color')->size()

/*** BEGIN: Car::allInstances()->select(c|c.Car:color = 'no-color')->size() ***/
SELECT 1 AS val, COUNT(*) AS res, 'Integer' AS type
FROM (
    /*** BEGIN: Car::allInstances()->select(c|c.Car:color = 'no-color') ***/
    SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_c AS res, 'Car' AS type
    FROM (SELECT *
    FROM (
        /*** BEGIN: c.Car:color = 'no-color' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c
        FROM (
            /*** BEGIN: c.Car:color ***/
            SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
            FROM Car
            /*** END: c.Car:color ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-color' ***/
            SELECT 1 AS val, 'no-color' AS res, 'String' AS type
            /*** END: 'no-color' ***/
        ) AS TEMP_RIGHT
        /*** END: c.Car:color = 'no-color' ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1) AS TEMP_gbody
    /*** END: Car::allInstances()->select(c|c.Car:color = 'no-color') ***/
) AS TEMP_src
/*** END: Car::allInstances()->select(c|c.Car:color = 'no-color')->size() ***/


Car::allInstances()->exists(c|c.Car:color <> 'no-color')

/*** BEGIN: Car::allInstances()->exists(c|c.Car:color <> 'no-color') ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: c.Car:color <> 'no-color' ***/
    SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res <> TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:color ***/
        SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
        FROM Car
        /*** END: c.Car:color ***/
    ) AS TEMP_LEFT
    JOIN (
        /*** BEGIN: 'no-color' ***/
        SELECT 1 AS val, 'no-color' AS res, 'String' AS type
        /*** END: 'no-color' ***/
    ) AS TEMP_RIGHT
    /*** END: c.Car:color <> 'no-color' ***/
) AS TEMP_body
WHERE TEMP_body.res = 1
/*** END: Car::allInstances()->exists(c|c.Car:color <> 'no-color') ***/


Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name = 'no-name'))->size()

/*** BEGIN: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name = 'no-name'))->size() ***/
SELECT 1 AS val, COUNT(*) AS res, 'Integer' AS type
FROM (
    /*** BEGIN: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name = 'no-name')) ***/
    SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_c AS res, 'Car' AS type
    FROM (SELECT *
    FROM (
        /*** BEGIN: c.Car:owners->exists(p|p.Person:name = 'no-name') ***/
        SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_c AS ref_c, CASE WHEN TEMP_gbody.ref_c IS NULL THEN 0 ELSE TEMP_gbody.res END AS res
        FROM (
            /*** BEGIN: c ***/
            SELECT 1 AS val, Car_id AS res, 'Car' AS type, Car_id AS ref_c
            FROM Car
            /*** END: c ***/
        ) AS TEMP_src
        LEFT JOIN (SELECT COUNT(*) > 0 AS res, TEMP_body.ref_c AS ref_c
        FROM (
            /*** BEGIN: p.Person:name = 'no-name' ***/
            SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_p AS ref_p, TEMP_LEFT.ref_c AS ref_c
            FROM (
                /*** BEGIN: p.Person:name ***/
                SELECT TEMP_obj.val AS val, 'String' AS type, name AS res, TEMP_obj.ref_p AS ref_p, TEMP_obj.ref_c AS ref_c
                FROM (
                    /*** BEGIN: p ***/
                    SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c, owners AS ref_p
                    FROM Car
                    LEFT JOIN Ownership
                    ON Car_id = Ownership.ownedCars
                    /*** END: p ***/
                ) AS TEMP_obj
                LEFT JOIN Person
                ON Person.Person_id = TEMP_obj.ref_p AND TEMP_obj.val = 1
                /*** END: p.Person:name ***/
            ) AS TEMP_LEFT
            JOIN (
                /*** BEGIN: 'no-name' ***/
                SELECT 1 AS val, 'no-name' AS res, 'String' AS type
                /*** END: 'no-name' ***/
            ) AS TEMP_RIGHT
            /*** END: p.Person:name = 'no-name' ***/
        ) AS TEMP_body
        WHERE TEMP_body.res = 1
        GROUP BY TEMP_body.ref_c) AS TEMP_gbody
        ON TEMP_src.ref_c = TEMP_gbody.ref_c
        /*** END: c.Car:owners->exists(p|p.Person:name = 'no-name') ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1) AS TEMP_gbody
    /*** END: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name = 'no-name')) ***/
) AS TEMP_src
/*** END: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name = 'no-name'))->size() ***/


Car::allInstances()->exists(c|c.Car:owners->forAll(p|p.Person:name = 'no-name'))

/*** BEGIN: Car::allInstances()->exists(c|c.Car:owners->forAll(p|p.Person:name = 'no-name')) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: c.Car:owners->forAll(p|p.Person:name = 'no-name') ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_c AS ref_c, CASE WHEN TEMP_gbody.ref_c IS NULL THEN 1 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: c ***/
        SELECT 1 AS val, Car_id AS res, 'Car' AS type, Car_id AS ref_c
        FROM Car
        /*** END: c ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT 1 AS val, COUNT(*) = 0 AS res, TEMP_body.ref_c AS ref_c
    FROM (
        /*** BEGIN: p.Person:name = 'no-name' ***/
        SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_p AS ref_p, TEMP_LEFT.ref_c AS ref_c
        FROM (
            /*** BEGIN: p.Person:name ***/
            SELECT TEMP_obj.val AS val, 'String' AS type, name AS res, TEMP_obj.ref_p AS ref_p, TEMP_obj.ref_c AS ref_c
            FROM (
                /*** BEGIN: p ***/
                SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c, owners AS ref_p
                FROM Car
                LEFT JOIN Ownership
                ON Car_id = Ownership.ownedCars
                /*** END: p ***/
            ) AS TEMP_obj
            LEFT JOIN Person
            ON Person.Person_id = TEMP_obj.ref_p AND TEMP_obj.val = 1
            /*** END: p.Person:name ***/
        ) AS TEMP_LEFT
        JOIN (
            /*** BEGIN: 'no-name' ***/
            SELECT 1 AS val, 'no-name' AS res, 'String' AS type
            /*** END: 'no-name' ***/
        ) AS TEMP_RIGHT
        /*** END: p.Person:name = 'no-name' ***/
    ) AS TEMP_body
    WHERE TEMP_body.val = 1 AND IFNULL(TEMP_body.res, 0) = 0
    GROUP BY TEMP_body.ref_c) AS TEMP_gbody
    ON TEMP_src.ref_c = TEMP_gbody.ref_c
    /*** END: c.Car:owners->forAll(p|p.Person:name = 'no-name') ***/
) AS TEMP_body
WHERE TEMP_body.res = 1
/*** END: Car::allInstances()->exists(c|c.Car:owners->forAll(p|p.Person:name = 'no-name')) ***/


Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name.oclIsUndefined()))->size()

/*** BEGIN: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name.oclIsUndefined()))->size() ***/
SELECT 1 AS val, COUNT(*) AS res, 'Integer' AS type
FROM (
    /*** BEGIN: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name.oclIsUndefined())) ***/
    SELECT TEMP_gbody.val AS val, TEMP_gbody.ref_c AS res, 'Car' AS type
    FROM (SELECT *
    FROM (
        /*** BEGIN: c.Car:owners->exists(p|p.Person:name.oclIsUndefined()) ***/
        SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_c AS ref_c, CASE WHEN TEMP_gbody.ref_c IS NULL THEN 0 ELSE TEMP_gbody.res END AS res
        FROM (
            /*** BEGIN: c ***/
            SELECT 1 AS val, Car_id AS res, 'Car' AS type, Car_id AS ref_c
            FROM Car
            /*** END: c ***/
        ) AS TEMP_src
        LEFT JOIN (SELECT COUNT(*) > 0 AS res, TEMP_body.ref_c AS ref_c
        FROM (
            /*** BEGIN: p.Person:name.oclIsUndefined() ***/
            SELECT TEMP_src.val AS val, CASE WHEN TEMP_src.val = 0 THEN NULL ELSE TEMP_src.res IS NULL END AS res, 'Boolean' AS type, TEMP_src.ref_p AS ref_p, TEMP_src.ref_c AS ref_c
            FROM (
                /*** BEGIN: p.Person:name ***/
                SELECT TEMP_obj.val AS val, 'String' AS type, name AS res, TEMP_obj.ref_p AS ref_p, TEMP_obj.ref_c AS ref_c
                FROM (
                    /*** BEGIN: p ***/
                    SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c, owners AS ref_p
                    FROM Car
                    LEFT JOIN Ownership
                    ON Car_id = Ownership.ownedCars
                    /*** END: p ***/
                ) AS TEMP_obj
                LEFT JOIN Person
                ON Person.Person_id = TEMP_obj.ref_p AND TEMP_obj.val = 1
                /*** END: p.Person:name ***/
            ) AS TEMP_src
            /*** END: p.Person:name.oclIsUndefined() ***/
        ) AS TEMP_body
        WHERE TEMP_body.res = 1
        GROUP BY TEMP_body.ref_c) AS TEMP_gbody
        ON TEMP_src.ref_c = TEMP_gbody.ref_c
        /*** END: c.Car:owners->exists(p|p.Person:name.oclIsUndefined()) ***/
    ) AS TEMP_body
    WHERE TEMP_body.res = 1) AS TEMP_gbody
    /*** END: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name.oclIsUndefined())) ***/
) AS TEMP_src
/*** END: Car::allInstances()->select(c|c.Car:owners->exists(p|p.Person:name.oclIsUndefined()))->size() ***/


Car::allInstances()->isEmpty()

/*** BEGIN: Car::allInstances()->isEmpty() ***/
SELECT 1 AS val, COUNT(*) = 0 AS res, 'Boolean' AS type
FROM (
    /*** BEGIN: Car::allInstances() ***/
    SELECT 1 AS val, Car_id AS res, 'Car' AS type
    FROM Car
    /*** END: Car::allInstances() ***/
) AS TEMP_src
/*** END: Car::allInstances()->isEmpty() ***/


Car::allInstances()->collect(c|c.Car:color)->isEmpty()

/*** BEGIN: Car::allInstances()->collect(c|c.Car:color)->isEmpty() ***/
SELECT 1 AS val, COUNT(*) = 0 AS res, 'Boolean' AS type
FROM (
    /*** BEGIN: Car::allInstances()->collect(c|c.Car:color) ***/
    SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
    FROM (
        /*** BEGIN: c.Car:color ***/
        SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
        FROM Car
        /*** END: c.Car:color ***/
    ) AS TEMP_body
    /*** END: Car::allInstances()->collect(c|c.Car:color) ***/
) AS TEMP_src
/*** END: Car::allInstances()->collect(c|c.Car:color)->isEmpty() ***/


Car::allInstances()->collect(c|c.Car:owners->isEmpty())

/*** BEGIN: Car::allInstances()->collect(c|c.Car:owners->isEmpty()) ***/
SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
FROM (
    /*** BEGIN: c.Car:owners->isEmpty() ***/
    SELECT 1 AS val, CASE WHEN TEMP_src.val = 0 THEN 1 ELSE 0 END AS res, 'Boolean' AS type, TEMP_src.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:owners ***/
        SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
        FROM Car
        LEFT JOIN Ownership
        ON Car_id = Ownership.ownedCars
        /*** END: c.Car:owners ***/
    ) AS TEMP_src
    GROUP BY TEMP_src.ref_c, TEMP_src.val
    /*** END: c.Car:owners->isEmpty() ***/
) AS TEMP_body
/*** END: Car::allInstances()->collect(c|c.Car:owners->isEmpty()) ***/


Car::allInstances()->forAll(c|c.Car:owners->isEmpty())

/*** BEGIN: Car::allInstances()->forAll(c|c.Car:owners->isEmpty()) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: c.Car:owners->isEmpty() ***/
    SELECT 1 AS val, CASE WHEN TEMP_src.val = 0 THEN 1 ELSE 0 END AS res, 'Boolean' AS type, TEMP_src.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:owners ***/
        SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
        FROM Car
        LEFT JOIN Ownership
        ON Car_id = Ownership.ownedCars
        /*** END: c.Car:owners ***/
    ) AS TEMP_src
    GROUP BY TEMP_src.ref_c, TEMP_src.val
    /*** END: c.Car:owners->isEmpty() ***/
) AS TEMP_body
WHERE TEMP_body.res = 0
/*** END: Car::allInstances()->forAll(c|c.Car:owners->isEmpty()) ***/


Car::allInstances()->exists(c|c.Car:owners->isEmpty())

/*** BEGIN: Car::allInstances()->exists(c|c.Car:owners->isEmpty()) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: c.Car:owners->isEmpty() ***/
    SELECT 1 AS val, CASE WHEN TEMP_src.val = 0 THEN 1 ELSE 0 END AS res, 'Boolean' AS type, TEMP_src.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:owners ***/
        SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
        FROM Car
        LEFT JOIN Ownership
        ON Car_id = Ownership.ownedCars
        /*** END: c.Car:owners ***/
    ) AS TEMP_src
    GROUP BY TEMP_src.ref_c, TEMP_src.val
    /*** END: c.Car:owners->isEmpty() ***/
) AS TEMP_body
WHERE TEMP_body.res = 1
/*** END: Car::allInstances()->exists(c|c.Car:owners->isEmpty()) ***/


Car::allInstances()->notEmpty()

/*** BEGIN: Car::allInstances()->notEmpty() ***/
SELECT 1 AS val, COUNT(*) <> 0 AS res, 'Boolean' AS type
FROM (
    /*** BEGIN: Car::allInstances() ***/
    SELECT 1 AS val, Car_id AS res, 'Car' AS type
    FROM Car
    /*** END: Car::allInstances() ***/
) AS TEMP_src
/*** END: Car::allInstances()->notEmpty() ***/


Car::allInstances()->collect(c|c.Car:color)->notEmpty()

/*** BEGIN: Car::allInstances()->collect(c|c.Car:color)->notEmpty() ***/
SELECT 1 AS val, COUNT(*) <> 0 AS res, 'Boolean' AS type
FROM (
    /*** BEGIN: Car::allInstances()->collect(c|c.Car:color) ***/
    SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
    FROM (
        /*** BEGIN: c.Car:color ***/
        SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
        FROM Car
        /*** END: c.Car:color ***/
    ) AS TEMP_body
    /*** END: Car::allInstances()->collect(c|c.Car:color) ***/
) AS TEMP_src
/*** END: Car::allInstances()->collect(c|c.Car:color)->notEmpty() ***/


Car::allInstances()->collect(c|c.Car:owners->notEmpty())

/*** BEGIN: Car::allInstances()->collect(c|c.Car:owners->notEmpty()) ***/
SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
FROM (
    /*** BEGIN: c.Car:owners->notEmpty() ***/
    SELECT 1 AS val, CASE WHEN TEMP_src.val = 0 THEN 0 ELSE 1 END AS res, 'Boolean' AS type, TEMP_src.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:owners ***/
        SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
        FROM Car
        LEFT JOIN Ownership
        ON Car_id = Ownership.ownedCars
        /*** END: c.Car:owners ***/
    ) AS TEMP_src
    GROUP BY TEMP_src.ref_c, TEMP_src.val
    /*** END: c.Car:owners->notEmpty() ***/
) AS TEMP_body
/*** END: Car::allInstances()->collect(c|c.Car:owners->notEmpty()) ***/


Car::allInstances()->forAll(c|c.Car:owners->notEmpty())

/*** BEGIN: Car::allInstances()->forAll(c|c.Car:owners->notEmpty()) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: c.Car:owners->notEmpty() ***/
    SELECT 1 AS val, CASE WHEN TEMP_src.val = 0 THEN 0 ELSE 1 END AS res, 'Boolean' AS type, TEMP_src.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:owners ***/
        SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
        FROM Car
        LEFT JOIN Ownership
        ON Car_id = Ownership.ownedCars
        /*** END: c.Car:owners ***/
    ) AS TEMP_src
    GROUP BY TEMP_src.ref_c, TEMP_src.val
    /*** END: c.Car:owners->notEmpty() ***/
) AS TEMP_body
WHERE TEMP_body.res = 0
/*** END: Car::allInstances()->forAll(c|c.Car:owners->notEmpty()) ***/


Car::allInstances()->exists(c|c.Car:owners->notEmpty())

/*** BEGIN: Car::allInstances()->exists(c|c.Car:owners->notEmpty()) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) > 0 AS res
FROM (
    /*** BEGIN: c.Car:owners->notEmpty() ***/
    SELECT 1 AS val, CASE WHEN TEMP_src.val = 0 THEN 0 ELSE 1 END AS res, 'Boolean' AS type, TEMP_src.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:owners ***/
        SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
        FROM Car
        LEFT JOIN Ownership
        ON Car_id = Ownership.ownedCars
        /*** END: c.Car:owners ***/
    ) AS TEMP_src
    GROUP BY TEMP_src.ref_c, TEMP_src.val
    /*** END: c.Car:owners->notEmpty() ***/
) AS TEMP_body
WHERE TEMP_body.res = 1
/*** END: Car::allInstances()->exists(c|c.Car:owners->notEmpty()) ***/


Car::allInstances()->asSet()

/*** BEGIN: Car::allInstances()->asSet() ***/
SELECT DISTINCT TEMP_src.val AS val, TEMP_src.res AS res, TEMP_src.type AS type
FROM (
    /*** BEGIN: Car::allInstances() ***/
    SELECT 1 AS val, Car_id AS res, 'Car' AS type
    FROM Car
    /*** END: Car::allInstances() ***/
) AS TEMP_src
/*** END: Car::allInstances()->asSet() ***/


Car::allInstances()->collect(c|c.Car:color)->asSet()

/*** BEGIN: Car::allInstances()->collect(c|c.Car:color)->asSet() ***/
SELECT DISTINCT TEMP_src.val AS val, TEMP_src.res AS res, TEMP_src.type AS type
FROM (
    /*** BEGIN: Car::allInstances()->collect(c|c.Car:color) ***/
    SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
    FROM (
        /*** BEGIN: c.Car:color ***/
        SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
        FROM Car
        /*** END: c.Car:color ***/
    ) AS TEMP_body
    /*** END: Car::allInstances()->collect(c|c.Car:color) ***/
) AS TEMP_src
/*** END: Car::allInstances()->collect(c|c.Car:color)->asSet() ***/


Car::allInstances()->collect(c|c.Car:owners->asSet())->flatten()

/*** BEGIN: Car::allInstances()->collect(c|c.Car:owners->asSet())->flatten() ***/
SELECT 1 AS val, TEMP_src.res AS res, 'Unknown' AS type
FROM (
    /*** BEGIN: Car::allInstances()->collect(c|c.Car:owners->asSet()) ***/
    SELECT TEMP_body.val AS val, TEMP_body.res AS res, TEMP_body.type AS type
    FROM (
        /*** BEGIN: c.Car:owners->asSet() ***/
        SELECT DISTINCT TEMP_src.val AS val, TEMP_src.ref_c AS ref_c, TEMP_src.res AS res, TEMP_src.type AS type
        FROM (
            /*** BEGIN: c.Car:owners ***/
            SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c
            FROM Car
            LEFT JOIN Ownership
            ON Car_id = Ownership.ownedCars
            /*** END: c.Car:owners ***/
        ) AS TEMP_src
        /*** END: c.Car:owners->asSet() ***/
    ) AS TEMP_body
    /*** END: Car::allInstances()->collect(c|c.Car:owners->asSet()) ***/
) AS TEMP_src
WHERE TEMP_src.val = 1
/*** END: Car::allInstances()->collect(c|c.Car:owners->asSet())->flatten() ***/


Car::allInstances()->forAll(c|c.Car:owners->forAll(p|p.Person:ownedCars->forAll(c1|c1.Car:color=c.Car:color)))

/*** BEGIN: Car::allInstances()->forAll(c|c.Car:owners->forAll(p|p.Person:ownedCars->forAll(c1|c1.Car:color = c.Car:color))) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: c.Car:owners->forAll(p|p.Person:ownedCars->forAll(c1|c1.Car:color = c.Car:color)) ***/
    SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_c AS ref_c, CASE WHEN TEMP_gbody.ref_c IS NULL THEN 1 ELSE TEMP_gbody.res END AS res
    FROM (
        /*** BEGIN: c ***/
        SELECT 1 AS val, Car_id AS res, 'Car' AS type, Car_id AS ref_c
        FROM Car
        /*** END: c ***/
    ) AS TEMP_src
    LEFT JOIN (SELECT 1 AS val, COUNT(*) = 0 AS res, TEMP_body.ref_c AS ref_c
    FROM (
        /*** BEGIN: p.Person:ownedCars->forAll(c1|c1.Car:color = c.Car:color) ***/
        SELECT 1 AS val, 'Boolean' AS type, TEMP_src.ref_c AS ref_c, TEMP_src.ref_p AS ref_p, CASE WHEN TEMP_gbody.ref_p IS NULL THEN 1 ELSE TEMP_gbody.res END AS res
        FROM (
            /*** BEGIN: p ***/
            SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c, owners AS ref_p
            FROM Car
            LEFT JOIN Ownership
            ON Car_id = Ownership.ownedCars
            /*** END: p ***/
        ) AS TEMP_src
        LEFT JOIN (SELECT 1 AS val, COUNT(*) = 0 AS res, TEMP_body.ref_p AS ref_p, TEMP_body.ref_c AS ref_c
        FROM (
            /*** BEGIN: c1.Car:color = c.Car:color ***/
            SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_LEFT.ref_c1 AS ref_c1, TEMP_LEFT.ref_p AS ref_p, TEMP_LEFT.ref_c AS ref_c
            FROM (
                /*** BEGIN: c1.Car:color ***/
                SELECT TEMP_obj.val AS val, 'String' AS type, color AS res, TEMP_obj.ref_c1 AS ref_c1, TEMP_obj.ref_p AS ref_p, TEMP_obj.ref_c AS ref_c
                FROM (
                    /*** BEGIN: c1 ***/
                    SELECT TEMP_dmn.val AS val, TEMP_dmn.res AS res, TEMP_dmn.res AS ref_c1, TEMP_dmn.ref_p AS ref_p, TEMP_dmn.ref_c AS ref_c
                    FROM (
                        /*** BEGIN: p.Person:ownedCars ***/
                        SELECT CASE WHEN Ownership.owners IS NULL THEN 0 ELSE 1 END AS val, CASE WHEN Ownership.owners IS NULL THEN 'EmptyCol' ELSE 'Car' END AS type, ownedCars AS res, TEMP_obj.ref_p AS ref_p, TEMP_obj.ref_c AS ref_c
                        FROM (
                            /*** BEGIN: p ***/
                            SELECT CASE WHEN Ownership.ownedCars IS NULL THEN 0 ELSE 1 END AS val, owners AS res, CASE WHEN Ownership.ownedCars IS NULL THEN 'EmptyCol' ELSE 'Person' END AS type, Car_id AS ref_c, owners AS ref_p
                            FROM Car
                            LEFT JOIN Ownership
                            ON Car_id = Ownership.ownedCars
                            /*** END: p ***/
                        ) AS TEMP_obj
                        LEFT JOIN Ownership
                        ON Ownership.owners = TEMP_obj.ref_p AND TEMP_obj.val = 1
                        /*** END: p.Person:ownedCars ***/
                    ) AS TEMP_dmn
                    /*** END: c1 ***/
                ) AS TEMP_obj
                LEFT JOIN Car
                ON Car.Car_id = TEMP_obj.ref_c1 AND TEMP_obj.val = 1
                /*** END: c1.Car:color ***/
            ) AS TEMP_LEFT
            RIGHT JOIN (
                /*** BEGIN: c.Car:color ***/
                SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
                FROM Car
                /*** END: c.Car:color ***/
            ) AS TEMP_RIGHT
            ON TEMP_LEFT.ref_c = TEMP_RIGHT.ref_c
            /*** END: c1.Car:color = c.Car:color ***/
        ) AS TEMP_body
        WHERE TEMP_body.val = 1 AND IFNULL(TEMP_body.res, 0) = 0
        GROUP BY TEMP_body.ref_p, TEMP_body.ref_c) AS TEMP_gbody
        ON TEMP_src.ref_c = TEMP_gbody.ref_c AND TEMP_src.ref_p = TEMP_gbody.ref_p
        /*** END: p.Person:ownedCars->forAll(c1|c1.Car:color = c.Car:color) ***/
    ) AS TEMP_body
    WHERE TEMP_body.val = 1 AND IFNULL(TEMP_body.res, 0) = 0
    GROUP BY TEMP_body.ref_c) AS TEMP_gbody
    ON TEMP_src.ref_c = TEMP_gbody.ref_c
    /*** END: c.Car:owners->forAll(p|p.Person:ownedCars->forAll(c1|c1.Car:color = c.Car:color)) ***/
) AS TEMP_body
WHERE TEMP_body.res = 0
/*** END: Car::allInstances()->forAll(c|c.Car:owners->forAll(p|p.Person:ownedCars->forAll(c1|c1.Car:color = c.Car:color))) ***/


Car::allInstances()->forAll(c|'blue'=c.Car:color)

/*** BEGIN: Car::allInstances()->forAll(c|'blue' = c.Car:color) ***/
SELECT 1 AS val, 'Boolean' AS type, COUNT(*) = 0 AS res
FROM (
    /*** BEGIN: 'blue' = c.Car:color ***/
    SELECT CASE WHEN TEMP_LEFT.val = 0 OR TEMP_RIGHT.val = 0 THEN 0 ELSE 1 END AS val, 'Boolean' AS type, TEMP_LEFT.res = TEMP_RIGHT.res AS res, TEMP_RIGHT.ref_c AS ref_c
    FROM (
        /*** BEGIN: c.Car:color ***/
        SELECT 1 AS val, 'String' AS type, color AS res, Car_id AS ref_c
        FROM Car
        /*** END: c.Car:color ***/
    ) AS TEMP_RIGHT
    JOIN (
        /*** BEGIN: 'blue' ***/
        SELECT 1 AS val, 'blue' AS res, 'String' AS type
        /*** END: 'blue' ***/
    ) AS TEMP_LEFT
    /*** END: 'blue' = c.Car:color ***/
) AS TEMP_body
WHERE TEMP_body.res = 0
/*** END: Car::allInstances()->forAll(c|'blue' = c.Car:color) ***/


